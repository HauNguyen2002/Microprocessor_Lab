
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002900  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a54  08002a54  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002a54  08002a54  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a54  08002a54  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000058  08002ab4  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002ab4  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091c5  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a79  00000000  00000000  00029246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002acc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002b708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ab5  00000000  00000000  0002c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b284  00000000  00000000  00042b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082217  00000000  00000000  0004dd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cffa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000289c  00000000  00000000  000cfff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	080029f4 	.word	0x080029f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	080029f4 	.word	0x080029f4

0800014c <subMODEProcess>:
int mode_timeout=200;
int inc_timeout=200;
int set_timeout=200;

void subMODEProcess()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	mode_flag=1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subMODEProcess+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000074 	.word	0x20000074

08000164 <subINCProcess>:

void subINCProcess()
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
	inc_flag=1;
 8000168:	4b03      	ldr	r3, [pc, #12]	; (8000178 <subINCProcess+0x14>)
 800016a:	2201      	movs	r2, #1
 800016c:	601a      	str	r2, [r3, #0]
}
 800016e:	bf00      	nop
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	20000078 	.word	0x20000078

0800017c <subSETProcess>:

void subSETProcess()
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	set_flag=1;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <subSETProcess+0x14>)
 8000182:	2201      	movs	r2, #1
 8000184:	601a      	str	r2, [r3, #0]
}
 8000186:	bf00      	nop
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	2000007c 	.word	0x2000007c

08000194 <getMODEInput>:

void getMODEInput()
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	mode3= mode2;
 8000198:	4b1e      	ldr	r3, [pc, #120]	; (8000214 <getMODEInput+0x80>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a1e      	ldr	r2, [pc, #120]	; (8000218 <getMODEInput+0x84>)
 800019e:	6013      	str	r3, [r2, #0]
	mode2= mode1;
 80001a0:	4b1e      	ldr	r3, [pc, #120]	; (800021c <getMODEInput+0x88>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a1b      	ldr	r2, [pc, #108]	; (8000214 <getMODEInput+0x80>)
 80001a6:	6013      	str	r3, [r2, #0]
	mode1= HAL_GPIO_ReadPin(GPIOB, mode_Pin);
 80001a8:	2101      	movs	r1, #1
 80001aa:	481d      	ldr	r0, [pc, #116]	; (8000220 <getMODEInput+0x8c>)
 80001ac:	f001 fbe2 	bl	8001974 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	461a      	mov	r2, r3
 80001b4:	4b19      	ldr	r3, [pc, #100]	; (800021c <getMODEInput+0x88>)
 80001b6:	601a      	str	r2, [r3, #0]
	if(mode1==mode2 && mode2==mode3)
 80001b8:	4b18      	ldr	r3, [pc, #96]	; (800021c <getMODEInput+0x88>)
 80001ba:	681a      	ldr	r2, [r3, #0]
 80001bc:	4b15      	ldr	r3, [pc, #84]	; (8000214 <getMODEInput+0x80>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d125      	bne.n	8000210 <getMODEInput+0x7c>
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <getMODEInput+0x80>)
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	4b13      	ldr	r3, [pc, #76]	; (8000218 <getMODEInput+0x84>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	d11f      	bne.n	8000210 <getMODEInput+0x7c>
	{
		if(mode3!=mode4)
 80001d0:	4b11      	ldr	r3, [pc, #68]	; (8000218 <getMODEInput+0x84>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b13      	ldr	r3, [pc, #76]	; (8000224 <getMODEInput+0x90>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	429a      	cmp	r2, r3
 80001da:	d00a      	beq.n	80001f2 <getMODEInput+0x5e>
		{
			mode4=mode3;
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <getMODEInput+0x84>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a10      	ldr	r2, [pc, #64]	; (8000224 <getMODEInput+0x90>)
 80001e2:	6013      	str	r3, [r2, #0]
			if(mode4==PRESSED_STATE)
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <getMODEInput+0x90>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d111      	bne.n	8000210 <getMODEInput+0x7c>
			{
				subMODEProcess();
 80001ec:	f7ff ffae 	bl	800014c <subMODEProcess>
				mode4= NORMAL_STATE;
				mode_timeout=200;
			}
		}
	}
}
 80001f0:	e00e      	b.n	8000210 <getMODEInput+0x7c>
			mode_timeout--;
 80001f2:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <getMODEInput+0x94>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	3b01      	subs	r3, #1
 80001f8:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <getMODEInput+0x94>)
 80001fa:	6013      	str	r3, [r2, #0]
			if(mode_timeout==0)
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <getMODEInput+0x94>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d105      	bne.n	8000210 <getMODEInput+0x7c>
				mode4= NORMAL_STATE;
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <getMODEInput+0x90>)
 8000206:	2201      	movs	r2, #1
 8000208:	601a      	str	r2, [r3, #0]
				mode_timeout=200;
 800020a:	4b07      	ldr	r3, [pc, #28]	; (8000228 <getMODEInput+0x94>)
 800020c:	22c8      	movs	r2, #200	; 0xc8
 800020e:	601a      	str	r2, [r3, #0]
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000004 	.word	0x20000004
 8000218:	20000008 	.word	0x20000008
 800021c:	20000000 	.word	0x20000000
 8000220:	40010c00 	.word	0x40010c00
 8000224:	2000000c 	.word	0x2000000c
 8000228:	20000030 	.word	0x20000030

0800022c <getINCInput>:


void getINCInput()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	inc3= inc2;
 8000230:	4b25      	ldr	r3, [pc, #148]	; (80002c8 <getINCInput+0x9c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a25      	ldr	r2, [pc, #148]	; (80002cc <getINCInput+0xa0>)
 8000236:	6013      	str	r3, [r2, #0]
	inc2= inc1;
 8000238:	4b25      	ldr	r3, [pc, #148]	; (80002d0 <getINCInput+0xa4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a22      	ldr	r2, [pc, #136]	; (80002c8 <getINCInput+0x9c>)
 800023e:	6013      	str	r3, [r2, #0]
	inc1= HAL_GPIO_ReadPin(GPIOB, inc_Pin);
 8000240:	2102      	movs	r1, #2
 8000242:	4824      	ldr	r0, [pc, #144]	; (80002d4 <getINCInput+0xa8>)
 8000244:	f001 fb96 	bl	8001974 <HAL_GPIO_ReadPin>
 8000248:	4603      	mov	r3, r0
 800024a:	461a      	mov	r2, r3
 800024c:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <getINCInput+0xa4>)
 800024e:	601a      	str	r2, [r3, #0]
	if(inc1==inc2 && inc2==inc3)
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <getINCInput+0xa4>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <getINCInput+0x9c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	429a      	cmp	r2, r3
 800025a:	d132      	bne.n	80002c2 <getINCInput+0x96>
 800025c:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <getINCInput+0x9c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <getINCInput+0xa0>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	429a      	cmp	r2, r3
 8000266:	d12c      	bne.n	80002c2 <getINCInput+0x96>
	{
		if(inc3!=inc4)
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <getINCInput+0xa0>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <getINCInput+0xac>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d00d      	beq.n	8000290 <getINCInput+0x64>
		{
			inc4=inc3;
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <getINCInput+0xa0>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a17      	ldr	r2, [pc, #92]	; (80002d8 <getINCInput+0xac>)
 800027a:	6013      	str	r3, [r2, #0]
			if(inc4==PRESSED_STATE)
 800027c:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <getINCInput+0xac>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d11e      	bne.n	80002c2 <getINCInput+0x96>
			{
				subINCProcess();
 8000284:	f7ff ff6e 	bl	8000164 <subINCProcess>
				inc_timeout=100;
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <getINCInput+0xb0>)
 800028a:	2264      	movs	r2, #100	; 0x64
 800028c:	601a      	str	r2, [r3, #0]
					inc_timeout=200;
				}
			}
		}
	}
}
 800028e:	e018      	b.n	80002c2 <getINCInput+0x96>
			inc_timeout--;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <getINCInput+0xb0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	3b01      	subs	r3, #1
 8000296:	4a11      	ldr	r2, [pc, #68]	; (80002dc <getINCInput+0xb0>)
 8000298:	6013      	str	r3, [r2, #0]
			if(inc_timeout==0)
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <getINCInput+0xb0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d10f      	bne.n	80002c2 <getINCInput+0x96>
				if(inc4==PRESSED_STATE)
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <getINCInput+0xac>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d105      	bne.n	80002b6 <getINCInput+0x8a>
					subINCProcess();
 80002aa:	f7ff ff5b 	bl	8000164 <subINCProcess>
					inc_timeout=40;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <getINCInput+0xb0>)
 80002b0:	2228      	movs	r2, #40	; 0x28
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	e005      	b.n	80002c2 <getINCInput+0x96>
					inc4= NORMAL_STATE;
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <getINCInput+0xac>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	601a      	str	r2, [r3, #0]
					inc_timeout=200;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <getINCInput+0xb0>)
 80002be:	22c8      	movs	r2, #200	; 0xc8
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000014 	.word	0x20000014
 80002cc:	20000018 	.word	0x20000018
 80002d0:	20000010 	.word	0x20000010
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	2000001c 	.word	0x2000001c
 80002dc:	20000034 	.word	0x20000034

080002e0 <getSETInput>:

void getSETInput()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	set3= set2;
 80002e4:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <getSETInput+0x80>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1e      	ldr	r2, [pc, #120]	; (8000364 <getSETInput+0x84>)
 80002ea:	6013      	str	r3, [r2, #0]
	set2= set1;
 80002ec:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <getSETInput+0x88>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <getSETInput+0x80>)
 80002f2:	6013      	str	r3, [r2, #0]
	set1= HAL_GPIO_ReadPin(GPIOB, set_Pin);
 80002f4:	2104      	movs	r1, #4
 80002f6:	481d      	ldr	r0, [pc, #116]	; (800036c <getSETInput+0x8c>)
 80002f8:	f001 fb3c 	bl	8001974 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	4b19      	ldr	r3, [pc, #100]	; (8000368 <getSETInput+0x88>)
 8000302:	601a      	str	r2, [r3, #0]
	if(set1==set2 && set2==set3)
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <getSETInput+0x88>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <getSETInput+0x80>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	429a      	cmp	r2, r3
 800030e:	d125      	bne.n	800035c <getSETInput+0x7c>
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <getSETInput+0x80>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b13      	ldr	r3, [pc, #76]	; (8000364 <getSETInput+0x84>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	429a      	cmp	r2, r3
 800031a:	d11f      	bne.n	800035c <getSETInput+0x7c>
	{
		if(set3!=set4)
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <getSETInput+0x84>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	4b13      	ldr	r3, [pc, #76]	; (8000370 <getSETInput+0x90>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	429a      	cmp	r2, r3
 8000326:	d00a      	beq.n	800033e <getSETInput+0x5e>
		{
			set4=set3;
 8000328:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <getSETInput+0x84>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a10      	ldr	r2, [pc, #64]	; (8000370 <getSETInput+0x90>)
 800032e:	6013      	str	r3, [r2, #0]
			if(set4==PRESSED_STATE)
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <getSETInput+0x90>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d111      	bne.n	800035c <getSETInput+0x7c>
			{
				subSETProcess();
 8000338:	f7ff ff20 	bl	800017c <subSETProcess>
				set4= NORMAL_STATE;
				set_timeout=200;
			}
		}
	}
}
 800033c:	e00e      	b.n	800035c <getSETInput+0x7c>
			set_timeout--;
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <getSETInput+0x94>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	3b01      	subs	r3, #1
 8000344:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <getSETInput+0x94>)
 8000346:	6013      	str	r3, [r2, #0]
			if(set_timeout==0)
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <getSETInput+0x94>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d105      	bne.n	800035c <getSETInput+0x7c>
				set4= NORMAL_STATE;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <getSETInput+0x90>)
 8000352:	2201      	movs	r2, #1
 8000354:	601a      	str	r2, [r3, #0]
				set_timeout=200;
 8000356:	4b07      	ldr	r3, [pc, #28]	; (8000374 <getSETInput+0x94>)
 8000358:	22c8      	movs	r2, #200	; 0xc8
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000024 	.word	0x20000024
 8000364:	20000028 	.word	0x20000028
 8000368:	20000020 	.word	0x20000020
 800036c:	40010c00 	.word	0x40010c00
 8000370:	2000002c 	.word	0x2000002c
 8000374:	20000038 	.word	0x20000038

08000378 <fsm_run>:
int seg4=0;
int temp=0;
int temp_auto1=0;
int temp_auto2=0;
void fsm_run()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	switch (status)
 800037c:	4b8c      	ldr	r3, [pc, #560]	; (80005b0 <fsm_run+0x238>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b03      	cmp	r3, #3
 8000382:	f000 80f0 	beq.w	8000566 <fsm_run+0x1ee>
 8000386:	2b03      	cmp	r3, #3
 8000388:	f300 8199 	bgt.w	80006be <fsm_run+0x346>
 800038c:	2b01      	cmp	r3, #1
 800038e:	d002      	beq.n	8000396 <fsm_run+0x1e>
 8000390:	2b02      	cmp	r3, #2
 8000392:	d074      	beq.n	800047e <fsm_run+0x106>
			auto2=AUTO_GREEN_2;
			status= AUTO;
		}
		break;
	}
}
 8000394:	e193      	b.n	80006be <fsm_run+0x346>
		HAL_GPIO_WritePin(GPIOA, led_green_Pin,0);
 8000396:	2200      	movs	r2, #0
 8000398:	2110      	movs	r1, #16
 800039a:	4886      	ldr	r0, [pc, #536]	; (80005b4 <fsm_run+0x23c>)
 800039c:	f001 fb01 	bl	80019a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin,0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2102      	movs	r1, #2
 80003a4:	4883      	ldr	r0, [pc, #524]	; (80005b4 <fsm_run+0x23c>)
 80003a6:	f001 fafc 	bl	80019a2 <HAL_GPIO_WritePin>
		if(timer_flag==1)
 80003aa:	4b83      	ldr	r3, [pc, #524]	; (80005b8 <fsm_run+0x240>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d10a      	bne.n	80003c8 <fsm_run+0x50>
			HAL_GPIO_TogglePin(GPIOA, led_red_Pin);
 80003b2:	2108      	movs	r1, #8
 80003b4:	487f      	ldr	r0, [pc, #508]	; (80005b4 <fsm_run+0x23c>)
 80003b6:	f001 fb0c 	bl	80019d2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
 80003ba:	2101      	movs	r1, #1
 80003bc:	487d      	ldr	r0, [pc, #500]	; (80005b4 <fsm_run+0x23c>)
 80003be:	f001 fb08 	bl	80019d2 <HAL_GPIO_TogglePin>
			setTimer(50);
 80003c2:	2032      	movs	r0, #50	; 0x32
 80003c4:	f000 fe28 	bl	8001018 <setTimer>
		if(inc_flag==1)
 80003c8:	4b7c      	ldr	r3, [pc, #496]	; (80005bc <fsm_run+0x244>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d130      	bne.n	8000432 <fsm_run+0xba>
			if(temp>=99) temp=99;
 80003d0:	4b7b      	ldr	r3, [pc, #492]	; (80005c0 <fsm_run+0x248>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b62      	cmp	r3, #98	; 0x62
 80003d6:	dd03      	ble.n	80003e0 <fsm_run+0x68>
 80003d8:	4b79      	ldr	r3, [pc, #484]	; (80005c0 <fsm_run+0x248>)
 80003da:	2263      	movs	r2, #99	; 0x63
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	e004      	b.n	80003ea <fsm_run+0x72>
			else temp++;
 80003e0:	4b77      	ldr	r3, [pc, #476]	; (80005c0 <fsm_run+0x248>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	4a76      	ldr	r2, [pc, #472]	; (80005c0 <fsm_run+0x248>)
 80003e8:	6013      	str	r3, [r2, #0]
			seg1=temp-((temp/10)*10);
 80003ea:	4b75      	ldr	r3, [pc, #468]	; (80005c0 <fsm_run+0x248>)
 80003ec:	6819      	ldr	r1, [r3, #0]
 80003ee:	4b75      	ldr	r3, [pc, #468]	; (80005c4 <fsm_run+0x24c>)
 80003f0:	fb83 2301 	smull	r2, r3, r3, r1
 80003f4:	109a      	asrs	r2, r3, #2
 80003f6:	17cb      	asrs	r3, r1, #31
 80003f8:	1ad2      	subs	r2, r2, r3
 80003fa:	4613      	mov	r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	4413      	add	r3, r2
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	1aca      	subs	r2, r1, r3
 8000404:	4b70      	ldr	r3, [pc, #448]	; (80005c8 <fsm_run+0x250>)
 8000406:	601a      	str	r2, [r3, #0]
			seg2=temp/10;
 8000408:	4b6d      	ldr	r3, [pc, #436]	; (80005c0 <fsm_run+0x248>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a6d      	ldr	r2, [pc, #436]	; (80005c4 <fsm_run+0x24c>)
 800040e:	fb82 1203 	smull	r1, r2, r2, r3
 8000412:	1092      	asrs	r2, r2, #2
 8000414:	17db      	asrs	r3, r3, #31
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	4a6c      	ldr	r2, [pc, #432]	; (80005cc <fsm_run+0x254>)
 800041a:	6013      	str	r3, [r2, #0]
			seg3=seg1;
 800041c:	4b6a      	ldr	r3, [pc, #424]	; (80005c8 <fsm_run+0x250>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a6b      	ldr	r2, [pc, #428]	; (80005d0 <fsm_run+0x258>)
 8000422:	6013      	str	r3, [r2, #0]
			seg4=seg2;
 8000424:	4b69      	ldr	r3, [pc, #420]	; (80005cc <fsm_run+0x254>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a6a      	ldr	r2, [pc, #424]	; (80005d4 <fsm_run+0x25c>)
 800042a:	6013      	str	r3, [r2, #0]
			inc_flag=0;
 800042c:	4b63      	ldr	r3, [pc, #396]	; (80005bc <fsm_run+0x244>)
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
		if(set_flag==1)
 8000432:	4b69      	ldr	r3, [pc, #420]	; (80005d8 <fsm_run+0x260>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d106      	bne.n	8000448 <fsm_run+0xd0>
			red=temp;
 800043a:	4b61      	ldr	r3, [pc, #388]	; (80005c0 <fsm_run+0x248>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a67      	ldr	r2, [pc, #412]	; (80005dc <fsm_run+0x264>)
 8000440:	6013      	str	r3, [r2, #0]
			set_flag=0;
 8000442:	4b65      	ldr	r3, [pc, #404]	; (80005d8 <fsm_run+0x260>)
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
		if(mode_flag==1)
 8000448:	4b65      	ldr	r3, [pc, #404]	; (80005e0 <fsm_run+0x268>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b01      	cmp	r3, #1
 800044e:	f040 8131 	bne.w	80006b4 <fsm_run+0x33c>
			status=YELLOW;
 8000452:	4b57      	ldr	r3, [pc, #348]	; (80005b0 <fsm_run+0x238>)
 8000454:	2202      	movs	r2, #2
 8000456:	601a      	str	r2, [r3, #0]
			seg1=0;
 8000458:	4b5b      	ldr	r3, [pc, #364]	; (80005c8 <fsm_run+0x250>)
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
			seg2=0;
 800045e:	4b5b      	ldr	r3, [pc, #364]	; (80005cc <fsm_run+0x254>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
			seg3=0;
 8000464:	4b5a      	ldr	r3, [pc, #360]	; (80005d0 <fsm_run+0x258>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
			seg4=0;
 800046a:	4b5a      	ldr	r3, [pc, #360]	; (80005d4 <fsm_run+0x25c>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
			temp=0;
 8000470:	4b53      	ldr	r3, [pc, #332]	; (80005c0 <fsm_run+0x248>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
			mode_flag=0;
 8000476:	4b5a      	ldr	r3, [pc, #360]	; (80005e0 <fsm_run+0x268>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
		break;
 800047c:	e11a      	b.n	80006b4 <fsm_run+0x33c>
		HAL_GPIO_WritePin(GPIOA, led_red_Pin,0);
 800047e:	2200      	movs	r2, #0
 8000480:	2108      	movs	r1, #8
 8000482:	484c      	ldr	r0, [pc, #304]	; (80005b4 <fsm_run+0x23c>)
 8000484:	f001 fa8d 	bl	80019a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin,0);
 8000488:	2200      	movs	r2, #0
 800048a:	2101      	movs	r1, #1
 800048c:	4849      	ldr	r0, [pc, #292]	; (80005b4 <fsm_run+0x23c>)
 800048e:	f001 fa88 	bl	80019a2 <HAL_GPIO_WritePin>
		if(timer_flag==1)
 8000492:	4b49      	ldr	r3, [pc, #292]	; (80005b8 <fsm_run+0x240>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d10a      	bne.n	80004b0 <fsm_run+0x138>
			HAL_GPIO_TogglePin(GPIOA, led_yellow_Pin);
 800049a:	2120      	movs	r1, #32
 800049c:	4845      	ldr	r0, [pc, #276]	; (80005b4 <fsm_run+0x23c>)
 800049e:	f001 fa98 	bl	80019d2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_Pin);
 80004a2:	2104      	movs	r1, #4
 80004a4:	4843      	ldr	r0, [pc, #268]	; (80005b4 <fsm_run+0x23c>)
 80004a6:	f001 fa94 	bl	80019d2 <HAL_GPIO_TogglePin>
			setTimer(50);
 80004aa:	2032      	movs	r0, #50	; 0x32
 80004ac:	f000 fdb4 	bl	8001018 <setTimer>
		if(inc_flag==1)
 80004b0:	4b42      	ldr	r3, [pc, #264]	; (80005bc <fsm_run+0x244>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d130      	bne.n	800051a <fsm_run+0x1a2>
			if(temp>=99) temp=99;
 80004b8:	4b41      	ldr	r3, [pc, #260]	; (80005c0 <fsm_run+0x248>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b62      	cmp	r3, #98	; 0x62
 80004be:	dd03      	ble.n	80004c8 <fsm_run+0x150>
 80004c0:	4b3f      	ldr	r3, [pc, #252]	; (80005c0 <fsm_run+0x248>)
 80004c2:	2263      	movs	r2, #99	; 0x63
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	e004      	b.n	80004d2 <fsm_run+0x15a>
			else temp++;
 80004c8:	4b3d      	ldr	r3, [pc, #244]	; (80005c0 <fsm_run+0x248>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3301      	adds	r3, #1
 80004ce:	4a3c      	ldr	r2, [pc, #240]	; (80005c0 <fsm_run+0x248>)
 80004d0:	6013      	str	r3, [r2, #0]
			seg1=temp-((temp/10)*10);
 80004d2:	4b3b      	ldr	r3, [pc, #236]	; (80005c0 <fsm_run+0x248>)
 80004d4:	6819      	ldr	r1, [r3, #0]
 80004d6:	4b3b      	ldr	r3, [pc, #236]	; (80005c4 <fsm_run+0x24c>)
 80004d8:	fb83 2301 	smull	r2, r3, r3, r1
 80004dc:	109a      	asrs	r2, r3, #2
 80004de:	17cb      	asrs	r3, r1, #31
 80004e0:	1ad2      	subs	r2, r2, r3
 80004e2:	4613      	mov	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	1aca      	subs	r2, r1, r3
 80004ec:	4b36      	ldr	r3, [pc, #216]	; (80005c8 <fsm_run+0x250>)
 80004ee:	601a      	str	r2, [r3, #0]
			seg2=temp/10;
 80004f0:	4b33      	ldr	r3, [pc, #204]	; (80005c0 <fsm_run+0x248>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a33      	ldr	r2, [pc, #204]	; (80005c4 <fsm_run+0x24c>)
 80004f6:	fb82 1203 	smull	r1, r2, r2, r3
 80004fa:	1092      	asrs	r2, r2, #2
 80004fc:	17db      	asrs	r3, r3, #31
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	4a32      	ldr	r2, [pc, #200]	; (80005cc <fsm_run+0x254>)
 8000502:	6013      	str	r3, [r2, #0]
			seg3=seg1;
 8000504:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <fsm_run+0x250>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a31      	ldr	r2, [pc, #196]	; (80005d0 <fsm_run+0x258>)
 800050a:	6013      	str	r3, [r2, #0]
			seg4=seg2;
 800050c:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <fsm_run+0x254>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a30      	ldr	r2, [pc, #192]	; (80005d4 <fsm_run+0x25c>)
 8000512:	6013      	str	r3, [r2, #0]
			inc_flag=0;
 8000514:	4b29      	ldr	r3, [pc, #164]	; (80005bc <fsm_run+0x244>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
		if(set_flag==1)
 800051a:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <fsm_run+0x260>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d106      	bne.n	8000530 <fsm_run+0x1b8>
			yellow=temp;
 8000522:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <fsm_run+0x248>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a2f      	ldr	r2, [pc, #188]	; (80005e4 <fsm_run+0x26c>)
 8000528:	6013      	str	r3, [r2, #0]
			set_flag=0;
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <fsm_run+0x260>)
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
		if(mode_flag==1)
 8000530:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <fsm_run+0x268>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	f040 80bf 	bne.w	80006b8 <fsm_run+0x340>
			status=GREEN;
 800053a:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <fsm_run+0x238>)
 800053c:	2203      	movs	r2, #3
 800053e:	601a      	str	r2, [r3, #0]
			seg1=0;
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <fsm_run+0x250>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
			seg2=0;
 8000546:	4b21      	ldr	r3, [pc, #132]	; (80005cc <fsm_run+0x254>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
			seg3=0;
 800054c:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <fsm_run+0x258>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
			seg4=0;
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <fsm_run+0x25c>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
			temp=0;
 8000558:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <fsm_run+0x248>)
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
			mode_flag=0;
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <fsm_run+0x268>)
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
		break;
 8000564:	e0a8      	b.n	80006b8 <fsm_run+0x340>
		HAL_GPIO_WritePin(GPIOA, led_yellow_Pin,0);
 8000566:	2200      	movs	r2, #0
 8000568:	2120      	movs	r1, #32
 800056a:	4812      	ldr	r0, [pc, #72]	; (80005b4 <fsm_run+0x23c>)
 800056c:	f001 fa19 	bl	80019a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin,0);
 8000570:	2200      	movs	r2, #0
 8000572:	2104      	movs	r1, #4
 8000574:	480f      	ldr	r0, [pc, #60]	; (80005b4 <fsm_run+0x23c>)
 8000576:	f001 fa14 	bl	80019a2 <HAL_GPIO_WritePin>
		if(timer_flag==1)
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <fsm_run+0x240>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d10a      	bne.n	8000598 <fsm_run+0x220>
			HAL_GPIO_TogglePin(GPIOA, led_green_Pin);
 8000582:	2110      	movs	r1, #16
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <fsm_run+0x23c>)
 8000586:	f001 fa24 	bl	80019d2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin);
 800058a:	2102      	movs	r1, #2
 800058c:	4809      	ldr	r0, [pc, #36]	; (80005b4 <fsm_run+0x23c>)
 800058e:	f001 fa20 	bl	80019d2 <HAL_GPIO_TogglePin>
			setTimer(50);
 8000592:	2032      	movs	r0, #50	; 0x32
 8000594:	f000 fd40 	bl	8001018 <setTimer>
		if(inc_flag==1)
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <fsm_run+0x244>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d14c      	bne.n	800063a <fsm_run+0x2c2>
			if(temp>=99) temp=99;
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <fsm_run+0x248>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b62      	cmp	r3, #98	; 0x62
 80005a6:	dd1f      	ble.n	80005e8 <fsm_run+0x270>
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <fsm_run+0x248>)
 80005aa:	2263      	movs	r2, #99	; 0x63
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	e020      	b.n	80005f2 <fsm_run+0x27a>
 80005b0:	2000003c 	.word	0x2000003c
 80005b4:	40010800 	.word	0x40010800
 80005b8:	200000a8 	.word	0x200000a8
 80005bc:	20000078 	.word	0x20000078
 80005c0:	2000009c 	.word	0x2000009c
 80005c4:	66666667 	.word	0x66666667
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	20000090 	.word	0x20000090
 80005d0:	20000094 	.word	0x20000094
 80005d4:	20000098 	.word	0x20000098
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	20000080 	.word	0x20000080
 80005e0:	20000074 	.word	0x20000074
 80005e4:	20000084 	.word	0x20000084
			else temp++;
 80005e8:	4b36      	ldr	r3, [pc, #216]	; (80006c4 <fsm_run+0x34c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a35      	ldr	r2, [pc, #212]	; (80006c4 <fsm_run+0x34c>)
 80005f0:	6013      	str	r3, [r2, #0]
			seg1=temp-((temp/10)*10);
 80005f2:	4b34      	ldr	r3, [pc, #208]	; (80006c4 <fsm_run+0x34c>)
 80005f4:	6819      	ldr	r1, [r3, #0]
 80005f6:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <fsm_run+0x350>)
 80005f8:	fb83 2301 	smull	r2, r3, r3, r1
 80005fc:	109a      	asrs	r2, r3, #2
 80005fe:	17cb      	asrs	r3, r1, #31
 8000600:	1ad2      	subs	r2, r2, r3
 8000602:	4613      	mov	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4413      	add	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	1aca      	subs	r2, r1, r3
 800060c:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <fsm_run+0x354>)
 800060e:	601a      	str	r2, [r3, #0]
			seg2=temp/10;
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <fsm_run+0x34c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <fsm_run+0x350>)
 8000616:	fb82 1203 	smull	r1, r2, r2, r3
 800061a:	1092      	asrs	r2, r2, #2
 800061c:	17db      	asrs	r3, r3, #31
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	4a2b      	ldr	r2, [pc, #172]	; (80006d0 <fsm_run+0x358>)
 8000622:	6013      	str	r3, [r2, #0]
			seg3=seg1;
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <fsm_run+0x354>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a2a      	ldr	r2, [pc, #168]	; (80006d4 <fsm_run+0x35c>)
 800062a:	6013      	str	r3, [r2, #0]
			seg4=seg2;
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <fsm_run+0x358>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a29      	ldr	r2, [pc, #164]	; (80006d8 <fsm_run+0x360>)
 8000632:	6013      	str	r3, [r2, #0]
			inc_flag=0;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <fsm_run+0x364>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
		if(set_flag==1)
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <fsm_run+0x368>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d106      	bne.n	8000650 <fsm_run+0x2d8>
			green=temp;
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <fsm_run+0x34c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <fsm_run+0x36c>)
 8000648:	6013      	str	r3, [r2, #0]
			set_flag=0;
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <fsm_run+0x368>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
		if(mode_flag==1)
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <fsm_run+0x370>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d131      	bne.n	80006bc <fsm_run+0x344>
			HAL_GPIO_WritePin(GPIOA, led_green_Pin,0);
 8000658:	2200      	movs	r2, #0
 800065a:	2110      	movs	r1, #16
 800065c:	4823      	ldr	r0, [pc, #140]	; (80006ec <fsm_run+0x374>)
 800065e:	f001 f9a0 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin,0);
 8000662:	2200      	movs	r2, #0
 8000664:	2102      	movs	r1, #2
 8000666:	4821      	ldr	r0, [pc, #132]	; (80006ec <fsm_run+0x374>)
 8000668:	f001 f99b 	bl	80019a2 <HAL_GPIO_WritePin>
			mode_flag=0;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <fsm_run+0x370>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
			seg1=0;
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <fsm_run+0x354>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
			seg2=0;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <fsm_run+0x358>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
			seg3=0;
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <fsm_run+0x35c>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
			seg4=0;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <fsm_run+0x360>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
			temp=0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <fsm_run+0x34c>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
			temp_auto1=red;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <fsm_run+0x378>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <fsm_run+0x37c>)
 8000696:	6013      	str	r3, [r2, #0]
			temp_auto2=green;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <fsm_run+0x36c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <fsm_run+0x380>)
 800069e:	6013      	str	r3, [r2, #0]
			auto1=AUTO_RED_1;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <fsm_run+0x384>)
 80006a2:	2209      	movs	r2, #9
 80006a4:	601a      	str	r2, [r3, #0]
			auto2=AUTO_GREEN_2;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <fsm_run+0x388>)
 80006a8:	2212      	movs	r2, #18
 80006aa:	601a      	str	r2, [r3, #0]
			status= AUTO;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <fsm_run+0x38c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
		break;
 80006b2:	e003      	b.n	80006bc <fsm_run+0x344>
		break;
 80006b4:	bf00      	nop
 80006b6:	e002      	b.n	80006be <fsm_run+0x346>
		break;
 80006b8:	bf00      	nop
 80006ba:	e000      	b.n	80006be <fsm_run+0x346>
		break;
 80006bc:	bf00      	nop
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000009c 	.word	0x2000009c
 80006c8:	66666667 	.word	0x66666667
 80006cc:	2000008c 	.word	0x2000008c
 80006d0:	20000090 	.word	0x20000090
 80006d4:	20000094 	.word	0x20000094
 80006d8:	20000098 	.word	0x20000098
 80006dc:	20000078 	.word	0x20000078
 80006e0:	2000007c 	.word	0x2000007c
 80006e4:	20000088 	.word	0x20000088
 80006e8:	20000074 	.word	0x20000074
 80006ec:	40010800 	.word	0x40010800
 80006f0:	20000080 	.word	0x20000080
 80006f4:	200000a0 	.word	0x200000a0
 80006f8:	200000a4 	.word	0x200000a4
 80006fc:	20000044 	.word	0x20000044
 8000700:	20000048 	.word	0x20000048
 8000704:	2000003c 	.word	0x2000003c

08000708 <auto1_run>:

void auto1_run()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	switch(auto1)
 800070c:	4b6b      	ldr	r3, [pc, #428]	; (80008bc <auto1_run+0x1b4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b0b      	cmp	r3, #11
 8000712:	d04a      	beq.n	80007aa <auto1_run+0xa2>
 8000714:	2b0b      	cmp	r3, #11
 8000716:	f300 80cf 	bgt.w	80008b8 <auto1_run+0x1b0>
 800071a:	2b09      	cmp	r3, #9
 800071c:	d003      	beq.n	8000726 <auto1_run+0x1e>
 800071e:	2b0a      	cmp	r3, #10
 8000720:	f000 8084 	beq.w	800082c <auto1_run+0x124>
			}
			setCount(100);
		}
		break;
	}
}
 8000724:	e0c8      	b.n	80008b8 <auto1_run+0x1b0>
		if(count_flag==1)
 8000726:	4b66      	ldr	r3, [pc, #408]	; (80008c0 <auto1_run+0x1b8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b01      	cmp	r3, #1
 800072c:	f040 80bf 	bne.w	80008ae <auto1_run+0x1a6>
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	2101      	movs	r1, #1
 8000734:	4863      	ldr	r0, [pc, #396]	; (80008c4 <auto1_run+0x1bc>)
 8000736:	f001 f934 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2104      	movs	r1, #4
 800073e:	4861      	ldr	r0, [pc, #388]	; (80008c4 <auto1_run+0x1bc>)
 8000740:	f001 f92f 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2102      	movs	r1, #2
 8000748:	485e      	ldr	r0, [pc, #376]	; (80008c4 <auto1_run+0x1bc>)
 800074a:	f001 f92a 	bl	80019a2 <HAL_GPIO_WritePin>
			seg1=temp_auto1-((temp_auto1/10)*10);
 800074e:	4b5e      	ldr	r3, [pc, #376]	; (80008c8 <auto1_run+0x1c0>)
 8000750:	6819      	ldr	r1, [r3, #0]
 8000752:	4b5e      	ldr	r3, [pc, #376]	; (80008cc <auto1_run+0x1c4>)
 8000754:	fb83 2301 	smull	r2, r3, r3, r1
 8000758:	109a      	asrs	r2, r3, #2
 800075a:	17cb      	asrs	r3, r1, #31
 800075c:	1ad2      	subs	r2, r2, r3
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	1aca      	subs	r2, r1, r3
 8000768:	4b59      	ldr	r3, [pc, #356]	; (80008d0 <auto1_run+0x1c8>)
 800076a:	601a      	str	r2, [r3, #0]
			seg2=temp_auto1/10;
 800076c:	4b56      	ldr	r3, [pc, #344]	; (80008c8 <auto1_run+0x1c0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a56      	ldr	r2, [pc, #344]	; (80008cc <auto1_run+0x1c4>)
 8000772:	fb82 1203 	smull	r1, r2, r2, r3
 8000776:	1092      	asrs	r2, r2, #2
 8000778:	17db      	asrs	r3, r3, #31
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	4a55      	ldr	r2, [pc, #340]	; (80008d4 <auto1_run+0x1cc>)
 800077e:	6013      	str	r3, [r2, #0]
			temp_auto1--;
 8000780:	4b51      	ldr	r3, [pc, #324]	; (80008c8 <auto1_run+0x1c0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3b01      	subs	r3, #1
 8000786:	4a50      	ldr	r2, [pc, #320]	; (80008c8 <auto1_run+0x1c0>)
 8000788:	6013      	str	r3, [r2, #0]
			if(temp_auto1<0)
 800078a:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <auto1_run+0x1c0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da07      	bge.n	80007a2 <auto1_run+0x9a>
				temp_auto1=green;
 8000792:	4b51      	ldr	r3, [pc, #324]	; (80008d8 <auto1_run+0x1d0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a4c      	ldr	r2, [pc, #304]	; (80008c8 <auto1_run+0x1c0>)
 8000798:	6013      	str	r3, [r2, #0]
				auto1=AUTO_GREEN_1;
 800079a:	4b48      	ldr	r3, [pc, #288]	; (80008bc <auto1_run+0x1b4>)
 800079c:	220b      	movs	r2, #11
 800079e:	601a      	str	r2, [r3, #0]
				break;
 80007a0:	e08a      	b.n	80008b8 <auto1_run+0x1b0>
			setCount(100);
 80007a2:	2064      	movs	r0, #100	; 0x64
 80007a4:	f000 fc94 	bl	80010d0 <setCount>
		break;
 80007a8:	e081      	b.n	80008ae <auto1_run+0x1a6>
		if(count_flag==1)
 80007aa:	4b45      	ldr	r3, [pc, #276]	; (80008c0 <auto1_run+0x1b8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d17f      	bne.n	80008b2 <auto1_run+0x1aa>
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2101      	movs	r1, #1
 80007b6:	4843      	ldr	r0, [pc, #268]	; (80008c4 <auto1_run+0x1bc>)
 80007b8:	f001 f8f3 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2104      	movs	r1, #4
 80007c0:	4840      	ldr	r0, [pc, #256]	; (80008c4 <auto1_run+0x1bc>)
 80007c2:	f001 f8ee 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, 1);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2102      	movs	r1, #2
 80007ca:	483e      	ldr	r0, [pc, #248]	; (80008c4 <auto1_run+0x1bc>)
 80007cc:	f001 f8e9 	bl	80019a2 <HAL_GPIO_WritePin>
			seg1=temp_auto1-((temp_auto1/10)*10);
 80007d0:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <auto1_run+0x1c0>)
 80007d2:	6819      	ldr	r1, [r3, #0]
 80007d4:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <auto1_run+0x1c4>)
 80007d6:	fb83 2301 	smull	r2, r3, r3, r1
 80007da:	109a      	asrs	r2, r3, #2
 80007dc:	17cb      	asrs	r3, r1, #31
 80007de:	1ad2      	subs	r2, r2, r3
 80007e0:	4613      	mov	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	1aca      	subs	r2, r1, r3
 80007ea:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <auto1_run+0x1c8>)
 80007ec:	601a      	str	r2, [r3, #0]
			seg2=temp_auto1/10;
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <auto1_run+0x1c0>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a36      	ldr	r2, [pc, #216]	; (80008cc <auto1_run+0x1c4>)
 80007f4:	fb82 1203 	smull	r1, r2, r2, r3
 80007f8:	1092      	asrs	r2, r2, #2
 80007fa:	17db      	asrs	r3, r3, #31
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a35      	ldr	r2, [pc, #212]	; (80008d4 <auto1_run+0x1cc>)
 8000800:	6013      	str	r3, [r2, #0]
			temp_auto1--;
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <auto1_run+0x1c0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3b01      	subs	r3, #1
 8000808:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <auto1_run+0x1c0>)
 800080a:	6013      	str	r3, [r2, #0]
			if(temp_auto1<0)
 800080c:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <auto1_run+0x1c0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	da07      	bge.n	8000824 <auto1_run+0x11c>
				temp_auto1=yellow;
 8000814:	4b31      	ldr	r3, [pc, #196]	; (80008dc <auto1_run+0x1d4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a2b      	ldr	r2, [pc, #172]	; (80008c8 <auto1_run+0x1c0>)
 800081a:	6013      	str	r3, [r2, #0]
				auto1=AUTO_YELLOW_1;
 800081c:	4b27      	ldr	r3, [pc, #156]	; (80008bc <auto1_run+0x1b4>)
 800081e:	220a      	movs	r2, #10
 8000820:	601a      	str	r2, [r3, #0]
				break;
 8000822:	e049      	b.n	80008b8 <auto1_run+0x1b0>
			setCount(100);
 8000824:	2064      	movs	r0, #100	; 0x64
 8000826:	f000 fc53 	bl	80010d0 <setCount>
		break;
 800082a:	e042      	b.n	80008b2 <auto1_run+0x1aa>
		if(count_flag==1)
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <auto1_run+0x1b8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d140      	bne.n	80008b6 <auto1_run+0x1ae>
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	4822      	ldr	r0, [pc, #136]	; (80008c4 <auto1_run+0x1bc>)
 800083a:	f001 f8b2 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin, 1);
 800083e:	2201      	movs	r2, #1
 8000840:	2104      	movs	r1, #4
 8000842:	4820      	ldr	r0, [pc, #128]	; (80008c4 <auto1_run+0x1bc>)
 8000844:	f001 f8ad 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2102      	movs	r1, #2
 800084c:	481d      	ldr	r0, [pc, #116]	; (80008c4 <auto1_run+0x1bc>)
 800084e:	f001 f8a8 	bl	80019a2 <HAL_GPIO_WritePin>
			seg1=temp_auto1-((temp_auto1/10)*10);
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <auto1_run+0x1c0>)
 8000854:	6819      	ldr	r1, [r3, #0]
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <auto1_run+0x1c4>)
 8000858:	fb83 2301 	smull	r2, r3, r3, r1
 800085c:	109a      	asrs	r2, r3, #2
 800085e:	17cb      	asrs	r3, r1, #31
 8000860:	1ad2      	subs	r2, r2, r3
 8000862:	4613      	mov	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4413      	add	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	1aca      	subs	r2, r1, r3
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <auto1_run+0x1c8>)
 800086e:	601a      	str	r2, [r3, #0]
			seg2=temp_auto1/10;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <auto1_run+0x1c0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a15      	ldr	r2, [pc, #84]	; (80008cc <auto1_run+0x1c4>)
 8000876:	fb82 1203 	smull	r1, r2, r2, r3
 800087a:	1092      	asrs	r2, r2, #2
 800087c:	17db      	asrs	r3, r3, #31
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <auto1_run+0x1cc>)
 8000882:	6013      	str	r3, [r2, #0]
			temp_auto1--;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <auto1_run+0x1c0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3b01      	subs	r3, #1
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <auto1_run+0x1c0>)
 800088c:	6013      	str	r3, [r2, #0]
			if(temp_auto1<0)
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <auto1_run+0x1c0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	da07      	bge.n	80008a6 <auto1_run+0x19e>
				temp_auto1=red;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <auto1_run+0x1d8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <auto1_run+0x1c0>)
 800089c:	6013      	str	r3, [r2, #0]
				auto1=AUTO_RED_1;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <auto1_run+0x1b4>)
 80008a0:	2209      	movs	r2, #9
 80008a2:	601a      	str	r2, [r3, #0]
				break;
 80008a4:	e008      	b.n	80008b8 <auto1_run+0x1b0>
			setCount(100);
 80008a6:	2064      	movs	r0, #100	; 0x64
 80008a8:	f000 fc12 	bl	80010d0 <setCount>
		break;
 80008ac:	e003      	b.n	80008b6 <auto1_run+0x1ae>
		break;
 80008ae:	bf00      	nop
 80008b0:	e002      	b.n	80008b8 <auto1_run+0x1b0>
		break;
 80008b2:	bf00      	nop
 80008b4:	e000      	b.n	80008b8 <auto1_run+0x1b0>
		break;
 80008b6:	bf00      	nop
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000044 	.word	0x20000044
 80008c0:	200000b0 	.word	0x200000b0
 80008c4:	40010800 	.word	0x40010800
 80008c8:	200000a0 	.word	0x200000a0
 80008cc:	66666667 	.word	0x66666667
 80008d0:	2000008c 	.word	0x2000008c
 80008d4:	20000090 	.word	0x20000090
 80008d8:	20000088 	.word	0x20000088
 80008dc:	20000084 	.word	0x20000084
 80008e0:	20000080 	.word	0x20000080

080008e4 <auto2_run>:

void auto2_run()
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	switch(auto2)
 80008e8:	4b6b      	ldr	r3, [pc, #428]	; (8000a98 <auto2_run+0x1b4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b12      	cmp	r3, #18
 80008ee:	d04a      	beq.n	8000986 <auto2_run+0xa2>
 80008f0:	2b12      	cmp	r3, #18
 80008f2:	f300 80cf 	bgt.w	8000a94 <auto2_run+0x1b0>
 80008f6:	2b10      	cmp	r3, #16
 80008f8:	d003      	beq.n	8000902 <auto2_run+0x1e>
 80008fa:	2b11      	cmp	r3, #17
 80008fc:	f000 8084 	beq.w	8000a08 <auto2_run+0x124>
			}
			setCount2(100);
		}
		break;
	}
}
 8000900:	e0c8      	b.n	8000a94 <auto2_run+0x1b0>
		if(count2_flag==1)
 8000902:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <auto2_run+0x1b8>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	f040 80bf 	bne.w	8000a8a <auto2_run+0x1a6>
			HAL_GPIO_WritePin(GPIOA, led_red_Pin, 1);
 800090c:	2201      	movs	r2, #1
 800090e:	2108      	movs	r1, #8
 8000910:	4863      	ldr	r0, [pc, #396]	; (8000aa0 <auto2_run+0x1bc>)
 8000912:	f001 f846 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, led_yellow_Pin, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	4861      	ldr	r0, [pc, #388]	; (8000aa0 <auto2_run+0x1bc>)
 800091c:	f001 f841 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, led_green_Pin, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2110      	movs	r1, #16
 8000924:	485e      	ldr	r0, [pc, #376]	; (8000aa0 <auto2_run+0x1bc>)
 8000926:	f001 f83c 	bl	80019a2 <HAL_GPIO_WritePin>
			seg3=temp_auto2-((temp_auto2/10)*10);
 800092a:	4b5e      	ldr	r3, [pc, #376]	; (8000aa4 <auto2_run+0x1c0>)
 800092c:	6819      	ldr	r1, [r3, #0]
 800092e:	4b5e      	ldr	r3, [pc, #376]	; (8000aa8 <auto2_run+0x1c4>)
 8000930:	fb83 2301 	smull	r2, r3, r3, r1
 8000934:	109a      	asrs	r2, r3, #2
 8000936:	17cb      	asrs	r3, r1, #31
 8000938:	1ad2      	subs	r2, r2, r3
 800093a:	4613      	mov	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	1aca      	subs	r2, r1, r3
 8000944:	4b59      	ldr	r3, [pc, #356]	; (8000aac <auto2_run+0x1c8>)
 8000946:	601a      	str	r2, [r3, #0]
			seg4=temp_auto2/10;
 8000948:	4b56      	ldr	r3, [pc, #344]	; (8000aa4 <auto2_run+0x1c0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a56      	ldr	r2, [pc, #344]	; (8000aa8 <auto2_run+0x1c4>)
 800094e:	fb82 1203 	smull	r1, r2, r2, r3
 8000952:	1092      	asrs	r2, r2, #2
 8000954:	17db      	asrs	r3, r3, #31
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	4a55      	ldr	r2, [pc, #340]	; (8000ab0 <auto2_run+0x1cc>)
 800095a:	6013      	str	r3, [r2, #0]
			temp_auto2--;
 800095c:	4b51      	ldr	r3, [pc, #324]	; (8000aa4 <auto2_run+0x1c0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3b01      	subs	r3, #1
 8000962:	4a50      	ldr	r2, [pc, #320]	; (8000aa4 <auto2_run+0x1c0>)
 8000964:	6013      	str	r3, [r2, #0]
			if(temp_auto2<0)
 8000966:	4b4f      	ldr	r3, [pc, #316]	; (8000aa4 <auto2_run+0x1c0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	da07      	bge.n	800097e <auto2_run+0x9a>
				temp_auto2=green;
 800096e:	4b51      	ldr	r3, [pc, #324]	; (8000ab4 <auto2_run+0x1d0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a4c      	ldr	r2, [pc, #304]	; (8000aa4 <auto2_run+0x1c0>)
 8000974:	6013      	str	r3, [r2, #0]
				auto2=AUTO_GREEN_2;
 8000976:	4b48      	ldr	r3, [pc, #288]	; (8000a98 <auto2_run+0x1b4>)
 8000978:	2212      	movs	r2, #18
 800097a:	601a      	str	r2, [r3, #0]
				break;
 800097c:	e08a      	b.n	8000a94 <auto2_run+0x1b0>
			setCount2(100);
 800097e:	2064      	movs	r0, #100	; 0x64
 8000980:	f000 fc2c 	bl	80011dc <setCount2>
		break;
 8000984:	e081      	b.n	8000a8a <auto2_run+0x1a6>
		if(count2_flag==1)
 8000986:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <auto2_run+0x1b8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d17f      	bne.n	8000a8e <auto2_run+0x1aa>
			HAL_GPIO_WritePin(GPIOA, led_red_Pin, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2108      	movs	r1, #8
 8000992:	4843      	ldr	r0, [pc, #268]	; (8000aa0 <auto2_run+0x1bc>)
 8000994:	f001 f805 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, led_yellow_Pin, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2120      	movs	r1, #32
 800099c:	4840      	ldr	r0, [pc, #256]	; (8000aa0 <auto2_run+0x1bc>)
 800099e:	f001 f800 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, led_green_Pin, 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2110      	movs	r1, #16
 80009a6:	483e      	ldr	r0, [pc, #248]	; (8000aa0 <auto2_run+0x1bc>)
 80009a8:	f000 fffb 	bl	80019a2 <HAL_GPIO_WritePin>
			seg3=temp_auto2-((temp_auto2/10)*10);
 80009ac:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <auto2_run+0x1c0>)
 80009ae:	6819      	ldr	r1, [r3, #0]
 80009b0:	4b3d      	ldr	r3, [pc, #244]	; (8000aa8 <auto2_run+0x1c4>)
 80009b2:	fb83 2301 	smull	r2, r3, r3, r1
 80009b6:	109a      	asrs	r2, r3, #2
 80009b8:	17cb      	asrs	r3, r1, #31
 80009ba:	1ad2      	subs	r2, r2, r3
 80009bc:	4613      	mov	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	1aca      	subs	r2, r1, r3
 80009c6:	4b39      	ldr	r3, [pc, #228]	; (8000aac <auto2_run+0x1c8>)
 80009c8:	601a      	str	r2, [r3, #0]
			seg4=temp_auto2/10;
 80009ca:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <auto2_run+0x1c0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <auto2_run+0x1c4>)
 80009d0:	fb82 1203 	smull	r1, r2, r2, r3
 80009d4:	1092      	asrs	r2, r2, #2
 80009d6:	17db      	asrs	r3, r3, #31
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	4a35      	ldr	r2, [pc, #212]	; (8000ab0 <auto2_run+0x1cc>)
 80009dc:	6013      	str	r3, [r2, #0]
			temp_auto2--;
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <auto2_run+0x1c0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	4a2f      	ldr	r2, [pc, #188]	; (8000aa4 <auto2_run+0x1c0>)
 80009e6:	6013      	str	r3, [r2, #0]
			if(temp_auto2<0)
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <auto2_run+0x1c0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	da07      	bge.n	8000a00 <auto2_run+0x11c>
				temp_auto2=yellow;
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <auto2_run+0x1d4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a2b      	ldr	r2, [pc, #172]	; (8000aa4 <auto2_run+0x1c0>)
 80009f6:	6013      	str	r3, [r2, #0]
				auto2=AUTO_YELLOW_2;
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <auto2_run+0x1b4>)
 80009fa:	2211      	movs	r2, #17
 80009fc:	601a      	str	r2, [r3, #0]
				break;
 80009fe:	e049      	b.n	8000a94 <auto2_run+0x1b0>
			setCount2(100);
 8000a00:	2064      	movs	r0, #100	; 0x64
 8000a02:	f000 fbeb 	bl	80011dc <setCount2>
		break;
 8000a06:	e042      	b.n	8000a8e <auto2_run+0x1aa>
		if(count2_flag==1)
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <auto2_run+0x1b8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d140      	bne.n	8000a92 <auto2_run+0x1ae>
			HAL_GPIO_WritePin(GPIOA, led_red_Pin, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2108      	movs	r1, #8
 8000a14:	4822      	ldr	r0, [pc, #136]	; (8000aa0 <auto2_run+0x1bc>)
 8000a16:	f000 ffc4 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, led_yellow_Pin, 1);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	4820      	ldr	r0, [pc, #128]	; (8000aa0 <auto2_run+0x1bc>)
 8000a20:	f000 ffbf 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, led_green_Pin, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2110      	movs	r1, #16
 8000a28:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <auto2_run+0x1bc>)
 8000a2a:	f000 ffba 	bl	80019a2 <HAL_GPIO_WritePin>
			seg3=temp_auto2-((temp_auto2/10)*10);
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <auto2_run+0x1c0>)
 8000a30:	6819      	ldr	r1, [r3, #0]
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <auto2_run+0x1c4>)
 8000a34:	fb83 2301 	smull	r2, r3, r3, r1
 8000a38:	109a      	asrs	r2, r3, #2
 8000a3a:	17cb      	asrs	r3, r1, #31
 8000a3c:	1ad2      	subs	r2, r2, r3
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	1aca      	subs	r2, r1, r3
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <auto2_run+0x1c8>)
 8000a4a:	601a      	str	r2, [r3, #0]
			seg4=temp_auto2/10;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <auto2_run+0x1c0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <auto2_run+0x1c4>)
 8000a52:	fb82 1203 	smull	r1, r2, r2, r3
 8000a56:	1092      	asrs	r2, r2, #2
 8000a58:	17db      	asrs	r3, r3, #31
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <auto2_run+0x1cc>)
 8000a5e:	6013      	str	r3, [r2, #0]
			temp_auto2--;
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <auto2_run+0x1c0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <auto2_run+0x1c0>)
 8000a68:	6013      	str	r3, [r2, #0]
			if(temp_auto2<0)
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <auto2_run+0x1c0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da07      	bge.n	8000a82 <auto2_run+0x19e>
				temp_auto2=red;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <auto2_run+0x1d8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <auto2_run+0x1c0>)
 8000a78:	6013      	str	r3, [r2, #0]
				auto2=AUTO_RED_2;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <auto2_run+0x1b4>)
 8000a7c:	2210      	movs	r2, #16
 8000a7e:	601a      	str	r2, [r3, #0]
				break;
 8000a80:	e008      	b.n	8000a94 <auto2_run+0x1b0>
			setCount2(100);
 8000a82:	2064      	movs	r0, #100	; 0x64
 8000a84:	f000 fbaa 	bl	80011dc <setCount2>
		break;
 8000a88:	e003      	b.n	8000a92 <auto2_run+0x1ae>
		break;
 8000a8a:	bf00      	nop
 8000a8c:	e002      	b.n	8000a94 <auto2_run+0x1b0>
		break;
 8000a8e:	bf00      	nop
 8000a90:	e000      	b.n	8000a94 <auto2_run+0x1b0>
		break;
 8000a92:	bf00      	nop
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000048 	.word	0x20000048
 8000a9c:	200000b4 	.word	0x200000b4
 8000aa0:	40010800 	.word	0x40010800
 8000aa4:	200000a4 	.word	0x200000a4
 8000aa8:	66666667 	.word	0x66666667
 8000aac:	20000094 	.word	0x20000094
 8000ab0:	20000098 	.word	0x20000098
 8000ab4:	20000088 	.word	0x20000088
 8000ab8:	20000084 	.word	0x20000084
 8000abc:	20000080 	.word	0x20000080

08000ac0 <segment>:

void segment()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	switch (side)
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <segment+0x98>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	d002      	beq.n	8000ad2 <segment+0x12>
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	d01f      	beq.n	8000b10 <segment+0x50>
			side=SIDE1;
			setSide(25);
		}
		break;
	}
}
 8000ad0:	e040      	b.n	8000b54 <segment+0x94>
		if(side_flag==1)
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <segment+0x9c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d139      	bne.n	8000b4e <segment+0x8e>
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, 1);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2140      	movs	r1, #64	; 0x40
 8000ade:	4820      	ldr	r0, [pc, #128]	; (8000b60 <segment+0xa0>)
 8000ae0:	f000 ff5f 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	481d      	ldr	r0, [pc, #116]	; (8000b60 <segment+0xa0>)
 8000aea:	f000 ff5a 	bl	80019a2 <HAL_GPIO_WritePin>
			display7SEG_u(seg1);
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <segment+0xa4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f968 	bl	8000dc8 <display7SEG_u>
			display7SEG_t(seg2);
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <segment+0xa8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f9f5 	bl	8000eec <display7SEG_t>
			side=SIDE2;
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <segment+0x98>)
 8000b04:	2206      	movs	r2, #6
 8000b06:	601a      	str	r2, [r3, #0]
			setSide(25);
 8000b08:	2019      	movs	r0, #25
 8000b0a:	f000 fab3 	bl	8001074 <setSide>
		break;
 8000b0e:	e01e      	b.n	8000b4e <segment+0x8e>
		if(side_flag==1)
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <segment+0x9c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d11c      	bne.n	8000b52 <segment+0x92>
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	4810      	ldr	r0, [pc, #64]	; (8000b60 <segment+0xa0>)
 8000b1e:	f000 ff40 	bl	80019a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	480e      	ldr	r0, [pc, #56]	; (8000b60 <segment+0xa0>)
 8000b28:	f000 ff3b 	bl	80019a2 <HAL_GPIO_WritePin>
			display7SEG_u(seg3);
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <segment+0xac>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f949 	bl	8000dc8 <display7SEG_u>
			display7SEG_t(seg4);
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <segment+0xb0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f9d6 	bl	8000eec <display7SEG_t>
			side=SIDE1;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <segment+0x98>)
 8000b42:	2205      	movs	r2, #5
 8000b44:	601a      	str	r2, [r3, #0]
			setSide(25);
 8000b46:	2019      	movs	r0, #25
 8000b48:	f000 fa94 	bl	8001074 <setSide>
		break;
 8000b4c:	e001      	b.n	8000b52 <segment+0x92>
		break;
 8000b4e:	bf00      	nop
 8000b50:	e000      	b.n	8000b54 <segment+0x94>
		break;
 8000b52:	bf00      	nop
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000040 	.word	0x20000040
 8000b5c:	200000ac 	.word	0x200000ac
 8000b60:	40010800 	.word	0x40010800
 8000b64:	2000008c 	.word	0x2000008c
 8000b68:	20000090 	.word	0x20000090
 8000b6c:	20000094 	.word	0x20000094
 8000b70:	20000098 	.word	0x20000098

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b78:	f000 fc12 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7c:	f000 f81e 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f000 f8a4 	bl	8000ccc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b84:	f000 f856 	bl	8000c34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <main+0x44>)
 8000b8a:	f001 fb73 	bl	8002274 <HAL_TIM_Base_Start_IT>
  setTimer(50);
 8000b8e:	2032      	movs	r0, #50	; 0x32
 8000b90:	f000 fa42 	bl	8001018 <setTimer>
  setSide(50);
 8000b94:	2032      	movs	r0, #50	; 0x32
 8000b96:	f000 fa6d 	bl	8001074 <setSide>
  setCount(50);
 8000b9a:	2032      	movs	r0, #50	; 0x32
 8000b9c:	f000 fa98 	bl	80010d0 <setCount>
  setCount2(50);
 8000ba0:	2032      	movs	r0, #50	; 0x32
 8000ba2:	f000 fb1b 	bl	80011dc <setCount2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_run();
 8000ba6:	f7ff fbe7 	bl	8000378 <fsm_run>
	  segment();
 8000baa:	f7ff ff89 	bl	8000ac0 <segment>
	  auto1_run();
 8000bae:	f7ff fdab 	bl	8000708 <auto1_run>
	  auto2_run();
 8000bb2:	f7ff fe97 	bl	80008e4 <auto2_run>
	  fsm_run();
 8000bb6:	e7f6      	b.n	8000ba6 <main+0x32>
 8000bb8:	200000c8 	.word	0x200000c8

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b090      	sub	sp, #64	; 0x40
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0318 	add.w	r3, r7, #24
 8000bc6:	2228      	movs	r2, #40	; 0x28
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 ff0a 	bl	80029e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be2:	2301      	movs	r3, #1
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be6:	2310      	movs	r3, #16
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 0318 	add.w	r3, r7, #24
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 ff06 	bl	8001a04 <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bfe:	f000 f8dd 	bl	8000dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	230f      	movs	r3, #15
 8000c04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 f972 	bl	8001f04 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c26:	f000 f8c9 	bl	8000dbc <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3740      	adds	r7, #64	; 0x40
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c5a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c68:	2209      	movs	r2, #9
 8000c6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c7a:	f001 faab 	bl	80021d4 <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c84:	f000 f89a 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c96:	f001 fc41 	bl	800251c <HAL_TIM_ConfigClockSource>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ca0:	f000 f88c 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000cb2:	f001 fe09 	bl	80028c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cbc:	f000 f87e 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200000c8 	.word	0x200000c8

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <MX_GPIO_Init+0xb8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <MX_GPIO_Init+0xb8>)
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <MX_GPIO_Init+0xb8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_GPIO_Init+0xb8>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <MX_GPIO_Init+0xb8>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_GPIO_Init+0xb8>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|led_red_Pin
 8000d10:	2200      	movs	r2, #0
 8000d12:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000d16:	481c      	ldr	r0, [pc, #112]	; (8000d88 <MX_GPIO_Init+0xbc>)
 8000d18:	f000 fe43 	bl	80019a2 <HAL_GPIO_WritePin>
                          |led_green_Pin|led_yellow_Pin|EN0_Pin|EN1_Pin
                          |a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_Pin|LED_TEST_Pin|A_Pin|B_Pin
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f248 71f0 	movw	r1, #34800	; 0x87f0
 8000d22:	481a      	ldr	r0, [pc, #104]	; (8000d8c <MX_GPIO_Init+0xc0>)
 8000d24:	f000 fe3d 	bl	80019a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_YELLOW_Pin led_red_Pin
                           led_green_Pin led_yellow_Pin EN0_Pin EN1_Pin
                           a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|led_red_Pin
 8000d28:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000d2c:	60bb      	str	r3, [r7, #8]
                          |led_green_Pin|led_yellow_Pin|EN0_Pin|EN1_Pin
                          |a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2302      	movs	r3, #2
 8000d38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_GPIO_Init+0xbc>)
 8000d42:	f000 fc9d 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pins : mode_Pin inc_Pin set_Pin */
  GPIO_InitStruct.Pin = mode_Pin|inc_Pin|set_Pin;
 8000d46:	2307      	movs	r3, #7
 8000d48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	4619      	mov	r1, r3
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <MX_GPIO_Init+0xc0>)
 8000d5a:	f000 fc91 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_Pin LED_TEST_Pin A_Pin B_Pin
                           C_Pin D_Pin E_Pin F_Pin */
  GPIO_InitStruct.Pin = G_Pin|LED_TEST_Pin|A_Pin|B_Pin
 8000d5e:	f248 73f0 	movw	r3, #34800	; 0x87f0
 8000d62:	60bb      	str	r3, [r7, #8]
                          |C_Pin|D_Pin|E_Pin|F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_GPIO_Init+0xc0>)
 8000d78:	f000 fc82 	bl	8001680 <HAL_GPIO_Init>

}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d98:	f000 f952 	bl	8001040 <timerRun>
	sideRun();
 8000d9c:	f000 f97e 	bl	800109c <sideRun>
	countRun();
 8000da0:	f000 f9aa 	bl	80010f8 <countRun>
	count2Run();
 8000da4:	f000 fa2e 	bl	8001204 <count2Run>
	getMODEInput();
 8000da8:	f7ff f9f4 	bl	8000194 <getMODEInput>
	getINCInput();
 8000dac:	f7ff fa3e 	bl	800022c <getINCInput>
	getSETInput();
 8000db0:	f7ff fa96 	bl	80002e0 <getSETInput>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <display7SEG_u>:
#include "segment.h"

void display7SEG_u(int num)
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	int seg[10]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <display7SEG_u+0x11c>)
 8000dd2:	f107 0408 	add.w	r4, r7, #8
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000de4:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_GPIO_WritePin(GPIOB, A_Pin,((seg[num]>>0)&0x01));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000df0:	4413      	add	r3, r2
 8000df2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	461a      	mov	r2, r3
 8000e00:	2110      	movs	r1, #16
 8000e02:	4839      	ldr	r0, [pc, #228]	; (8000ee8 <display7SEG_u+0x120>)
 8000e04:	f000 fdcd 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, B_Pin,((seg[num]>>1)&0x01));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e10:	4413      	add	r3, r2
 8000e12:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000e16:	105b      	asrs	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	2120      	movs	r1, #32
 8000e24:	4830      	ldr	r0, [pc, #192]	; (8000ee8 <display7SEG_u+0x120>)
 8000e26:	f000 fdbc 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, C_Pin,((seg[num]>>2)&0x01));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e32:	4413      	add	r3, r2
 8000e34:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000e38:	109b      	asrs	r3, r3, #2
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	2140      	movs	r1, #64	; 0x40
 8000e46:	4828      	ldr	r0, [pc, #160]	; (8000ee8 <display7SEG_u+0x120>)
 8000e48:	f000 fdab 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D_Pin,((seg[num]>>3)&0x01));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e54:	4413      	add	r3, r2
 8000e56:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000e5a:	10db      	asrs	r3, r3, #3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	481f      	ldr	r0, [pc, #124]	; (8000ee8 <display7SEG_u+0x120>)
 8000e6a:	f000 fd9a 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, E_Pin,((seg[num]>>4)&0x01));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e76:	4413      	add	r3, r2
 8000e78:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000e7c:	111b      	asrs	r3, r3, #4
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	461a      	mov	r2, r3
 8000e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8c:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <display7SEG_u+0x120>)
 8000e8e:	f000 fd88 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, F_Pin,((seg[num]>>5)&0x01));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e9a:	4413      	add	r3, r2
 8000e9c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000ea0:	115b      	asrs	r3, r3, #5
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <display7SEG_u+0x120>)
 8000eb2:	f000 fd76 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G_Pin,((seg[num]>>6)&0x01));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000ec4:	119b      	asrs	r3, r3, #6
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <display7SEG_u+0x120>)
 8000ed6:	f000 fd64 	bl	80019a2 <HAL_GPIO_WritePin>
}
 8000eda:	bf00      	nop
 8000edc:	3730      	adds	r7, #48	; 0x30
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	08002a0c 	.word	0x08002a0c
 8000ee8:	40010c00 	.word	0x40010c00

08000eec <display7SEG_t>:
void display7SEG_t(int num)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	int seg[10]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
 8000ef4:	4b46      	ldr	r3, [pc, #280]	; (8001010 <display7SEG_t+0x124>)
 8000ef6:	f107 0408 	add.w	r4, r7, #8
 8000efa:	461d      	mov	r5, r3
 8000efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f08:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_GPIO_WritePin(GPIOA, a_Pin,((seg[num]>>0)&0x01));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f14:	4413      	add	r3, r2
 8000f16:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f28:	483a      	ldr	r0, [pc, #232]	; (8001014 <display7SEG_t+0x128>)
 8000f2a:	f000 fd3a 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, b_Pin,((seg[num]>>1)&0x01));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f36:	4413      	add	r3, r2
 8000f38:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000f3c:	105b      	asrs	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4c:	4831      	ldr	r0, [pc, #196]	; (8001014 <display7SEG_t+0x128>)
 8000f4e:	f000 fd28 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, c_Pin,((seg[num]>>2)&0x01));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000f60:	109b      	asrs	r3, r3, #2
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f70:	4828      	ldr	r0, [pc, #160]	; (8001014 <display7SEG_t+0x128>)
 8000f72:	f000 fd16 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, d_Pin,((seg[num]>>3)&0x01));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f7e:	4413      	add	r3, r2
 8000f80:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000f84:	10db      	asrs	r3, r3, #3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f94:	481f      	ldr	r0, [pc, #124]	; (8001014 <display7SEG_t+0x128>)
 8000f96:	f000 fd04 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, e_Pin,((seg[num]>>4)&0x01));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000fa2:	4413      	add	r3, r2
 8000fa4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000fa8:	111b      	asrs	r3, r3, #4
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb8:	4816      	ldr	r0, [pc, #88]	; (8001014 <display7SEG_t+0x128>)
 8000fba:	f000 fcf2 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, f_Pin,((seg[num]>>5)&0x01));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000fc6:	4413      	add	r3, r2
 8000fc8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000fcc:	115b      	asrs	r3, r3, #5
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <display7SEG_t+0x128>)
 8000fde:	f000 fce0 	bl	80019a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, g_Pin,((seg[num]>>6)&0x01));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000fea:	4413      	add	r3, r2
 8000fec:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000ff0:	119b      	asrs	r3, r3, #6
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <display7SEG_t+0x128>)
 8001002:	f000 fcce 	bl	80019a2 <HAL_GPIO_WritePin>
}
 8001006:	bf00      	nop
 8001008:	3730      	adds	r7, #48	; 0x30
 800100a:	46bd      	mov	sp, r7
 800100c:	bdb0      	pop	{r4, r5, r7, pc}
 800100e:	bf00      	nop
 8001010:	08002a0c 	.word	0x08002a0c
 8001014:	40010800 	.word	0x40010800

08001018 <setTimer>:
int count2_count=0;



void setTimer(int duration)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	timer_count=duration;
 8001020:	4a05      	ldr	r2, [pc, #20]	; (8001038 <setTimer+0x20>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
	timer_flag=0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <setTimer+0x24>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200000b8 	.word	0x200000b8
 800103c:	200000a8 	.word	0x200000a8

08001040 <timerRun>:

void timerRun()
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
	if(timer_count>0) timer_count--;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <timerRun+0x2c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	dd04      	ble.n	8001056 <timerRun+0x16>
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <timerRun+0x2c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3b01      	subs	r3, #1
 8001052:	4a06      	ldr	r2, [pc, #24]	; (800106c <timerRun+0x2c>)
 8001054:	6013      	str	r3, [r2, #0]
	if(timer_count==0) timer_flag=1;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <timerRun+0x2c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <timerRun+0x24>
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <timerRun+0x30>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	200000b8 	.word	0x200000b8
 8001070:	200000a8 	.word	0x200000a8

08001074 <setSide>:

void setSide(int duration)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	side_count=duration;
 800107c:	4a05      	ldr	r2, [pc, #20]	; (8001094 <setSide+0x20>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
	side_flag=0;
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <setSide+0x24>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200000bc 	.word	0x200000bc
 8001098:	200000ac 	.word	0x200000ac

0800109c <sideRun>:

void sideRun()
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	if(side_count>0) side_count--;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <sideRun+0x2c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dd04      	ble.n	80010b2 <sideRun+0x16>
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <sideRun+0x2c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <sideRun+0x2c>)
 80010b0:	6013      	str	r3, [r2, #0]
	if(side_count==0) side_flag=1;
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <sideRun+0x2c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <sideRun+0x24>
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <sideRun+0x30>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	200000bc 	.word	0x200000bc
 80010cc:	200000ac 	.word	0x200000ac

080010d0 <setCount>:

void setCount(int duration)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	count_count=duration;
 80010d8:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <setCount+0x20>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
	count_flag=0;
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <setCount+0x24>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	200000c0 	.word	0x200000c0
 80010f4:	200000b0 	.word	0x200000b0

080010f8 <countRun>:


void countRun()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	if(count_count>0) count_count--;
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <countRun+0xb0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dd04      	ble.n	800110e <countRun+0x16>
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <countRun+0xb0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3b01      	subs	r3, #1
 800110a:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <countRun+0xb0>)
 800110c:	6013      	str	r3, [r2, #0]
	if(mode_flag==1)
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <countRun+0xb4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d13e      	bne.n	8001194 <countRun+0x9c>
	{
		status=RED;
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <countRun+0xb8>)
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]
		auto1=WAIT1;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <countRun+0xbc>)
 800111e:	2208      	movs	r2, #8
 8001120:	601a      	str	r2, [r3, #0]
		auto2=WAIT2;
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <countRun+0xc0>)
 8001124:	220f      	movs	r2, #15
 8001126:	601a      	str	r2, [r3, #0]
		count_count=0;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <countRun+0xb0>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
		count2_count=0;
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <countRun+0xc4>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
		timer_flag=1;
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <countRun+0xc8>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]
		mode_flag=0;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <countRun+0xb4>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]

		seg1=0;
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <countRun+0xcc>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
		seg2=0;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <countRun+0xd0>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
		seg3=0;
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <countRun+0xd4>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
		seg4=0;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <countRun+0xd8>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2101      	movs	r1, #1
 800115c:	481d      	ldr	r0, [pc, #116]	; (80011d4 <countRun+0xdc>)
 800115e:	f000 fc20 	bl	80019a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2104      	movs	r1, #4
 8001166:	481b      	ldr	r0, [pc, #108]	; (80011d4 <countRun+0xdc>)
 8001168:	f000 fc1b 	bl	80019a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2102      	movs	r1, #2
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <countRun+0xdc>)
 8001172:	f000 fc16 	bl	80019a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, led_red_Pin, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2108      	movs	r1, #8
 800117a:	4816      	ldr	r0, [pc, #88]	; (80011d4 <countRun+0xdc>)
 800117c:	f000 fc11 	bl	80019a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, led_yellow_Pin, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2120      	movs	r1, #32
 8001184:	4813      	ldr	r0, [pc, #76]	; (80011d4 <countRun+0xdc>)
 8001186:	f000 fc0c 	bl	80019a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, led_green_Pin, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2110      	movs	r1, #16
 800118e:	4811      	ldr	r0, [pc, #68]	; (80011d4 <countRun+0xdc>)
 8001190:	f000 fc07 	bl	80019a2 <HAL_GPIO_WritePin>
	}
	if(count_count==0) count_flag=1;
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <countRun+0xb0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <countRun+0xaa>
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <countRun+0xe0>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000c0 	.word	0x200000c0
 80011ac:	20000074 	.word	0x20000074
 80011b0:	2000003c 	.word	0x2000003c
 80011b4:	20000044 	.word	0x20000044
 80011b8:	20000048 	.word	0x20000048
 80011bc:	200000c4 	.word	0x200000c4
 80011c0:	200000a8 	.word	0x200000a8
 80011c4:	2000008c 	.word	0x2000008c
 80011c8:	20000090 	.word	0x20000090
 80011cc:	20000094 	.word	0x20000094
 80011d0:	20000098 	.word	0x20000098
 80011d4:	40010800 	.word	0x40010800
 80011d8:	200000b0 	.word	0x200000b0

080011dc <setCount2>:

void setCount2(int duration)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	count2_count=duration;
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <setCount2+0x20>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
	count2_flag=0;
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <setCount2+0x24>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200000c4 	.word	0x200000c4
 8001200:	200000b4 	.word	0x200000b4

08001204 <count2Run>:

void count2Run()
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	if(count2_count>0) count2_count--;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <count2Run+0x2c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	dd04      	ble.n	800121a <count2Run+0x16>
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <count2Run+0x2c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <count2Run+0x2c>)
 8001218:	6013      	str	r3, [r2, #0]
	if(count2_count==0) count2_flag=1;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <count2Run+0x2c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <count2Run+0x24>
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <count2Run+0x30>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	200000c4 	.word	0x200000c4
 8001234:	200000b4 	.word	0x200000b4

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_MspInit+0x5c>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_MspInit+0x5c>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_MspInit+0x5c>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_MspInit+0x5c>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <HAL_MspInit+0x5c>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_MspInit+0x5c>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_MspInit+0x60>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_MspInit+0x60>)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40021000 	.word	0x40021000
 8001298:	40010000 	.word	0x40010000

0800129c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ac:	d113      	bne.n	80012d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_TIM_Base_MspInit+0x44>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <HAL_TIM_Base_MspInit+0x44>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_TIM_Base_MspInit+0x44>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	201c      	movs	r0, #28
 80012cc:	f000 f9a1 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012d0:	201c      	movs	r0, #28
 80012d2:	f000 f9ba 	bl	800164a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <NMI_Handler+0x4>

080012ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler+0x4>

080012f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <UsageFault_Handler+0x4>

08001302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132a:	f000 f87f 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <TIM2_IRQHandler+0x10>)
 800133a:	f000 ffe7 	bl	800230c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200000c8 	.word	0x200000c8

08001348 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	; (800138c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	; (8001398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800137a:	f7ff ffe5 	bl	8001348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f001 fb0d 	bl	800299c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001382:	f7ff fbf7 	bl	8000b74 <main>
  bx lr
 8001386:	4770      	bx	lr
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001390:	08002a5c 	.word	0x08002a5c
  ldr r2, =_sbss
 8001394:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001398:	20000114 	.word	0x20000114

0800139c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_2_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_Init+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_Init+0x28>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f923 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f000 f808 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff ff3c 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x54>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f93b 	bl	8001666 <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f000 f903 	bl	8001612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_InitTick+0x5c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000004c 	.word	0x2000004c
 8001424:	20000054 	.word	0x20000054
 8001428:	20000050 	.word	0x20000050

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x1c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x20>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <HAL_IncTick+0x20>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000054 	.word	0x20000054
 800144c:	20000110 	.word	0x20000110

08001450 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <HAL_GetTick+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000110 	.word	0x20000110

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4906      	ldr	r1, [pc, #24]	; (80014fc <__NVIC_EnableIRQ+0x34>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
         );
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f7ff ff90 	bl	8001500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff2d 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff42 	bl	80014ac <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff90 	bl	8001554 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5f 	bl	8001500 <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff35 	bl	80014c8 <__NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffa2 	bl	80015b8 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b08b      	sub	sp, #44	; 0x2c
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001692:	e148      	b.n	8001926 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001694:	2201      	movs	r2, #1
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	f040 8137 	bne.w	8001920 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4aa3      	ldr	r2, [pc, #652]	; (8001944 <HAL_GPIO_Init+0x2c4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d05e      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016bc:	4aa1      	ldr	r2, [pc, #644]	; (8001944 <HAL_GPIO_Init+0x2c4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d875      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016c2:	4aa1      	ldr	r2, [pc, #644]	; (8001948 <HAL_GPIO_Init+0x2c8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d058      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016c8:	4a9f      	ldr	r2, [pc, #636]	; (8001948 <HAL_GPIO_Init+0x2c8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d86f      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016ce:	4a9f      	ldr	r2, [pc, #636]	; (800194c <HAL_GPIO_Init+0x2cc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d052      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016d4:	4a9d      	ldr	r2, [pc, #628]	; (800194c <HAL_GPIO_Init+0x2cc>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d869      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016da:	4a9d      	ldr	r2, [pc, #628]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d04c      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016e0:	4a9b      	ldr	r2, [pc, #620]	; (8001950 <HAL_GPIO_Init+0x2d0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d863      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016e6:	4a9b      	ldr	r2, [pc, #620]	; (8001954 <HAL_GPIO_Init+0x2d4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d046      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016ec:	4a99      	ldr	r2, [pc, #612]	; (8001954 <HAL_GPIO_Init+0x2d4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d85d      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d82a      	bhi.n	800174c <HAL_GPIO_Init+0xcc>
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d859      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016fa:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <HAL_GPIO_Init+0x80>)
 80016fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001700:	0800177b 	.word	0x0800177b
 8001704:	08001755 	.word	0x08001755
 8001708:	08001767 	.word	0x08001767
 800170c:	080017a9 	.word	0x080017a9
 8001710:	080017af 	.word	0x080017af
 8001714:	080017af 	.word	0x080017af
 8001718:	080017af 	.word	0x080017af
 800171c:	080017af 	.word	0x080017af
 8001720:	080017af 	.word	0x080017af
 8001724:	080017af 	.word	0x080017af
 8001728:	080017af 	.word	0x080017af
 800172c:	080017af 	.word	0x080017af
 8001730:	080017af 	.word	0x080017af
 8001734:	080017af 	.word	0x080017af
 8001738:	080017af 	.word	0x080017af
 800173c:	080017af 	.word	0x080017af
 8001740:	080017af 	.word	0x080017af
 8001744:	0800175d 	.word	0x0800175d
 8001748:	08001771 	.word	0x08001771
 800174c:	4a82      	ldr	r2, [pc, #520]	; (8001958 <HAL_GPIO_Init+0x2d8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001752:	e02c      	b.n	80017ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e029      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	3304      	adds	r3, #4
 8001762:	623b      	str	r3, [r7, #32]
          break;
 8001764:	e024      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	3308      	adds	r3, #8
 800176c:	623b      	str	r3, [r7, #32]
          break;
 800176e:	e01f      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	330c      	adds	r3, #12
 8001776:	623b      	str	r3, [r7, #32]
          break;
 8001778:	e01a      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001782:	2304      	movs	r3, #4
 8001784:	623b      	str	r3, [r7, #32]
          break;
 8001786:	e013      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001790:	2308      	movs	r3, #8
 8001792:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	611a      	str	r2, [r3, #16]
          break;
 800179a:	e009      	b.n	80017b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800179c:	2308      	movs	r3, #8
 800179e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	615a      	str	r2, [r3, #20]
          break;
 80017a6:	e003      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
          break;
 80017ac:	e000      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          break;
 80017ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2bff      	cmp	r3, #255	; 0xff
 80017b4:	d801      	bhi.n	80017ba <HAL_GPIO_Init+0x13a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	e001      	b.n	80017be <HAL_GPIO_Init+0x13e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3304      	adds	r3, #4
 80017be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2bff      	cmp	r3, #255	; 0xff
 80017c4:	d802      	bhi.n	80017cc <HAL_GPIO_Init+0x14c>
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x152>
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	3b08      	subs	r3, #8
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	210f      	movs	r1, #15
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	6a39      	ldr	r1, [r7, #32]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	431a      	orrs	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8090 	beq.w	8001920 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001800:	4b56      	ldr	r3, [pc, #344]	; (800195c <HAL_GPIO_Init+0x2dc>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a55      	ldr	r2, [pc, #340]	; (800195c <HAL_GPIO_Init+0x2dc>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_GPIO_Init+0x2dc>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001818:	4a51      	ldr	r2, [pc, #324]	; (8001960 <HAL_GPIO_Init+0x2e0>)
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a49      	ldr	r2, [pc, #292]	; (8001964 <HAL_GPIO_Init+0x2e4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00d      	beq.n	8001860 <HAL_GPIO_Init+0x1e0>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a48      	ldr	r2, [pc, #288]	; (8001968 <HAL_GPIO_Init+0x2e8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d007      	beq.n	800185c <HAL_GPIO_Init+0x1dc>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a47      	ldr	r2, [pc, #284]	; (800196c <HAL_GPIO_Init+0x2ec>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_GPIO_Init+0x1d8>
 8001854:	2302      	movs	r3, #2
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1e2>
 8001858:	2303      	movs	r3, #3
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1e2>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1e2>
 8001860:	2300      	movs	r3, #0
 8001862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001872:	493b      	ldr	r1, [pc, #236]	; (8001960 <HAL_GPIO_Init+0x2e0>)
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800188c:	4b38      	ldr	r3, [pc, #224]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4937      	ldr	r1, [pc, #220]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4933      	ldr	r1, [pc, #204]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b4:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	492d      	ldr	r1, [pc, #180]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4929      	ldr	r1, [pc, #164]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	4923      	ldr	r1, [pc, #140]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	491f      	ldr	r1, [pc, #124]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	4919      	ldr	r1, [pc, #100]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4915      	ldr	r1, [pc, #84]	; (8001970 <HAL_GPIO_Init+0x2f0>)
 800191c:	4013      	ands	r3, r2
 800191e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	3301      	adds	r3, #1
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	f47f aeaf 	bne.w	8001694 <HAL_GPIO_Init+0x14>
  }
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	372c      	adds	r7, #44	; 0x2c
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	10320000 	.word	0x10320000
 8001948:	10310000 	.word	0x10310000
 800194c:	10220000 	.word	0x10220000
 8001950:	10210000 	.word	0x10210000
 8001954:	10120000 	.word	0x10120000
 8001958:	10110000 	.word	0x10110000
 800195c:	40021000 	.word	0x40021000
 8001960:	40010000 	.word	0x40010000
 8001964:	40010800 	.word	0x40010800
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40011000 	.word	0x40011000
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	887b      	ldrh	r3, [r7, #2]
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	e001      	b.n	8001996 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	807b      	strh	r3, [r7, #2]
 80019ae:	4613      	mov	r3, r2
 80019b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b2:	787b      	ldrb	r3, [r7, #1]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b8:	887a      	ldrh	r2, [r7, #2]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019be:	e003      	b.n	80019c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	041a      	lsls	r2, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	611a      	str	r2, [r3, #16]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019e4:	887a      	ldrh	r2, [r7, #2]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	041a      	lsls	r2, r3, #16
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	400b      	ands	r3, r1
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e26c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8087 	beq.w	8001b32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a24:	4b92      	ldr	r3, [pc, #584]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d00c      	beq.n	8001a4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a30:	4b8f      	ldr	r3, [pc, #572]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d112      	bne.n	8001a62 <HAL_RCC_OscConfig+0x5e>
 8001a3c:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a48:	d10b      	bne.n	8001a62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d06c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x12c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d168      	bne.n	8001b30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e246      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x76>
 8001a6c:	4b80      	ldr	r3, [pc, #512]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a7f      	ldr	r2, [pc, #508]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e02e      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x98>
 8001a82:	4b7b      	ldr	r3, [pc, #492]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a7a      	ldr	r2, [pc, #488]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b78      	ldr	r3, [pc, #480]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a77      	ldr	r2, [pc, #476]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e01d      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xbc>
 8001aa6:	4b72      	ldr	r3, [pc, #456]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a71      	ldr	r2, [pc, #452]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6e      	ldr	r2, [pc, #440]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001ac0:	4b6b      	ldr	r3, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a6a      	ldr	r2, [pc, #424]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a67      	ldr	r2, [pc, #412]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fcb6 	bl	8001450 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fcb2 	bl	8001450 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e1fa      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xe4>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff fca2 	bl	8001450 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff fc9e 	bl	8001450 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1e6      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x10c>
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3e:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00b      	beq.n	8001b62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b4a:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d11c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x18c>
 8001b56:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d116      	bne.n	8001b90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_RCC_OscConfig+0x176>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e1ba      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4939      	ldr	r1, [pc, #228]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	e03a      	b.n	8001c06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fc57 	bl	8001450 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fc53 	bl	8001450 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e19b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4927      	ldr	r1, [pc, #156]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e015      	b.n	8001c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fc36 	bl	8001450 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be8:	f7ff fc32 	bl	8001450 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e17a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d03a      	beq.n	8001c88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d019      	beq.n	8001c4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c20:	f7ff fc16 	bl	8001450 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff fc12 	bl	8001450 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e15a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f000 faa6 	bl	8002198 <RCC_Delay>
 8001c4c:	e01c      	b.n	8001c88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c54:	f7ff fbfc 	bl	8001450 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5a:	e00f      	b.n	8001c7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fbf8 	bl	8001450 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d908      	bls.n	8001c7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e140      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	42420000 	.word	0x42420000
 8001c78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	4b9e      	ldr	r3, [pc, #632]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e9      	bne.n	8001c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a6 	beq.w	8001de2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9a:	4b97      	ldr	r3, [pc, #604]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10d      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b94      	ldr	r3, [pc, #592]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a93      	ldr	r2, [pc, #588]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b91      	ldr	r3, [pc, #580]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b8e      	ldr	r3, [pc, #568]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d118      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cce:	4b8b      	ldr	r3, [pc, #556]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a8a      	ldr	r2, [pc, #552]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cda:	f7ff fbb9 	bl	8001450 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce2:	f7ff fbb5 	bl	8001450 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b64      	cmp	r3, #100	; 0x64
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0fd      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	4b81      	ldr	r3, [pc, #516]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x312>
 8001d08:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a7a      	ldr	r2, [pc, #488]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	e02d      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x334>
 8001d1e:	4b76      	ldr	r3, [pc, #472]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a75      	ldr	r2, [pc, #468]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6213      	str	r3, [r2, #32]
 8001d2a:	4b73      	ldr	r3, [pc, #460]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a72      	ldr	r2, [pc, #456]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	6213      	str	r3, [r2, #32]
 8001d36:	e01c      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d10c      	bne.n	8001d5a <HAL_RCC_OscConfig+0x356>
 8001d40:	4b6d      	ldr	r3, [pc, #436]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4a6c      	ldr	r2, [pc, #432]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	6213      	str	r3, [r2, #32]
 8001d4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a69      	ldr	r2, [pc, #420]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6213      	str	r3, [r2, #32]
 8001d58:	e00b      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d5a:	4b67      	ldr	r3, [pc, #412]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a66      	ldr	r2, [pc, #408]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6213      	str	r3, [r2, #32]
 8001d66:	4b64      	ldr	r3, [pc, #400]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a63      	ldr	r2, [pc, #396]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d015      	beq.n	8001da6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fb69 	bl	8001450 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7ff fb65 	bl	8001450 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0ab      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0ee      	beq.n	8001d82 <HAL_RCC_OscConfig+0x37e>
 8001da4:	e014      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da6:	f7ff fb53 	bl	8001450 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7ff fb4f 	bl	8001450 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e095      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ee      	bne.n	8001dae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d105      	bne.n	8001de2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd6:	4b48      	ldr	r3, [pc, #288]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a47      	ldr	r2, [pc, #284]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8081 	beq.w	8001eee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dec:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d061      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d146      	bne.n	8001e8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e00:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <HAL_RCC_OscConfig+0x4fc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fb23 	bl	8001450 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff fb1f 	bl	8001450 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e067      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e20:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e34:	d108      	bne.n	8001e48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	492d      	ldr	r1, [pc, #180]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a19      	ldr	r1, [r3, #32]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	4927      	ldr	r1, [pc, #156]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x4fc>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff faf3 	bl	8001450 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff faef 	bl	8001450 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e037      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x46a>
 8001e8c:	e02f      	b.n	8001eee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_RCC_OscConfig+0x4fc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fadc 	bl	8001450 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff fad8 	bl	8001450 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e020      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x498>
 8001eba:	e018      	b.n	8001eee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e013      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40007000 	.word	0x40007000
 8001f00:	42420060 	.word	0x42420060

08001f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0d0      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d910      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4965      	ldr	r1, [pc, #404]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0b8      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	494d      	ldr	r1, [pc, #308]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d040      	beq.n	8002024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d115      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e07f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc2:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e073      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e06b      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4936      	ldr	r1, [pc, #216]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff4:	f7ff fa2c 	bl	8001450 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7ff fa28 	bl	8001450 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e053      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d210      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	4922      	ldr	r1, [pc, #136]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e032      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4916      	ldr	r1, [pc, #88]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	490e      	ldr	r1, [pc, #56]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002092:	f000 f821 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	490a      	ldr	r1, [pc, #40]	; (80020cc <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1cc>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x1d0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f98a 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08002a44 	.word	0x08002a44
 80020d0:	2000004c 	.word	0x2000004c
 80020d4:	20000050 	.word	0x20000050

080020d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b490      	push	{r4, r7}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020e0:	1d3c      	adds	r4, r7, #4
 80020e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020e8:	f240 2301 	movw	r3, #513	; 0x201
 80020ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d002      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x40>
 8002112:	2b08      	cmp	r3, #8
 8002114:	d003      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x46>
 8002116:	e02d      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 800211a:	623b      	str	r3, [r7, #32]
      break;
 800211c:	e02d      	b.n	800217a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	0c9b      	lsrs	r3, r3, #18
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800212a:	4413      	add	r3, r2
 800212c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002130:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d013      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_RCC_GetSysClockFreq+0xb4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	0c5b      	lsrs	r3, r3, #17
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800214a:	4413      	add	r3, r2
 800214c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002150:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002156:	fb02 f203 	mul.w	r2, r2, r3
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	e004      	b.n	800216e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	623b      	str	r3, [r7, #32]
      break;
 8002172:	e002      	b.n	800217a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002176:	623b      	str	r3, [r7, #32]
      break;
 8002178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800217a:	6a3b      	ldr	r3, [r7, #32]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bc90      	pop	{r4, r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	08002a34 	.word	0x08002a34
 800218c:	40021000 	.word	0x40021000
 8002190:	007a1200 	.word	0x007a1200
 8002194:	003d0900 	.word	0x003d0900

08002198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <RCC_Delay+0x34>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <RCC_Delay+0x38>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0a5b      	lsrs	r3, r3, #9
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b4:	bf00      	nop
  }
  while (Delay --);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1e5a      	subs	r2, r3, #1
 80021ba:	60fa      	str	r2, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f9      	bne.n	80021b4 <RCC_Delay+0x1c>
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	2000004c 	.word	0x2000004c
 80021d0:	10624dd3 	.word	0x10624dd3

080021d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e041      	b.n	800226a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff f84e 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3304      	adds	r3, #4
 8002210:	4619      	mov	r1, r3
 8002212:	4610      	mov	r0, r2
 8002214:	f000 fa6a 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d001      	beq.n	800228c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e035      	b.n	80022f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a16      	ldr	r2, [pc, #88]	; (8002304 <HAL_TIM_Base_Start_IT+0x90>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_TIM_Base_Start_IT+0x4e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b6:	d004      	beq.n	80022c2 <HAL_TIM_Base_Start_IT+0x4e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_TIM_Base_Start_IT+0x94>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d111      	bne.n	80022e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b06      	cmp	r3, #6
 80022d2:	d010      	beq.n	80022f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e4:	e007      	b.n	80022f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40012c00 	.word	0x40012c00
 8002308:	40000400 	.word	0x40000400

0800230c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b02      	cmp	r3, #2
 8002320:	d122      	bne.n	8002368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b02      	cmp	r3, #2
 800232e:	d11b      	bne.n	8002368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0202 	mvn.w	r2, #2
 8002338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f9b1 	bl	80026b6 <HAL_TIM_IC_CaptureCallback>
 8002354:	e005      	b.n	8002362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f9a4 	bl	80026a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f9b3 	bl	80026c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b04      	cmp	r3, #4
 8002374:	d122      	bne.n	80023bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b04      	cmp	r3, #4
 8002382:	d11b      	bne.n	80023bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0204 	mvn.w	r2, #4
 800238c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f987 	bl	80026b6 <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f97a 	bl	80026a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f989 	bl	80026c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0208 	mvn.w	r2, #8
 80023e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2204      	movs	r2, #4
 80023e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f95d 	bl	80026b6 <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f950 	bl	80026a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f95f 	bl	80026c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b10      	cmp	r3, #16
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b10      	cmp	r3, #16
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0210 	mvn.w	r2, #16
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2208      	movs	r2, #8
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f933 	bl	80026b6 <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f926 	bl	80026a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f935 	bl	80026c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d10e      	bne.n	8002490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d107      	bne.n	8002490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0201 	mvn.w	r2, #1
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fc80 	bl	8000d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249a:	2b80      	cmp	r3, #128	; 0x80
 800249c:	d10e      	bne.n	80024bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a8:	2b80      	cmp	r3, #128	; 0x80
 80024aa:	d107      	bne.n	80024bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa67 	bl	800298a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d107      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f8f9 	bl	80026da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d10e      	bne.n	8002514 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b20      	cmp	r3, #32
 8002502:	d107      	bne.n	8002514 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0220 	mvn.w	r2, #32
 800250c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa32 	bl	8002978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_TIM_ConfigClockSource+0x18>
 8002530:	2302      	movs	r3, #2
 8002532:	e0b3      	b.n	800269c <HAL_TIM_ConfigClockSource+0x180>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800255a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256c:	d03e      	beq.n	80025ec <HAL_TIM_ConfigClockSource+0xd0>
 800256e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002572:	f200 8087 	bhi.w	8002684 <HAL_TIM_ConfigClockSource+0x168>
 8002576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257a:	f000 8085 	beq.w	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 800257e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002582:	d87f      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x168>
 8002584:	2b70      	cmp	r3, #112	; 0x70
 8002586:	d01a      	beq.n	80025be <HAL_TIM_ConfigClockSource+0xa2>
 8002588:	2b70      	cmp	r3, #112	; 0x70
 800258a:	d87b      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x168>
 800258c:	2b60      	cmp	r3, #96	; 0x60
 800258e:	d050      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x116>
 8002590:	2b60      	cmp	r3, #96	; 0x60
 8002592:	d877      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x168>
 8002594:	2b50      	cmp	r3, #80	; 0x50
 8002596:	d03c      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0xf6>
 8002598:	2b50      	cmp	r3, #80	; 0x50
 800259a:	d873      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x168>
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d058      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x136>
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d86f      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x168>
 80025a4:	2b30      	cmp	r3, #48	; 0x30
 80025a6:	d064      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x156>
 80025a8:	2b30      	cmp	r3, #48	; 0x30
 80025aa:	d86b      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x168>
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d060      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x156>
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d867      	bhi.n	8002684 <HAL_TIM_ConfigClockSource+0x168>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d05c      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x156>
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d05a      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025bc:	e062      	b.n	8002684 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6899      	ldr	r1, [r3, #8]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f000 f95c 	bl	800288a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	609a      	str	r2, [r3, #8]
      break;
 80025ea:	e04e      	b.n	800268a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6899      	ldr	r1, [r3, #8]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f000 f945 	bl	800288a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800260e:	609a      	str	r2, [r3, #8]
      break;
 8002610:	e03b      	b.n	800268a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	461a      	mov	r2, r3
 8002620:	f000 f8bc 	bl	800279c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2150      	movs	r1, #80	; 0x50
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f913 	bl	8002856 <TIM_ITRx_SetConfig>
      break;
 8002630:	e02b      	b.n	800268a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	461a      	mov	r2, r3
 8002640:	f000 f8da 	bl	80027f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2160      	movs	r1, #96	; 0x60
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f903 	bl	8002856 <TIM_ITRx_SetConfig>
      break;
 8002650:	e01b      	b.n	800268a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	461a      	mov	r2, r3
 8002660:	f000 f89c 	bl	800279c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2140      	movs	r1, #64	; 0x40
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f8f3 	bl	8002856 <TIM_ITRx_SetConfig>
      break;
 8002670:	e00b      	b.n	800268a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4619      	mov	r1, r3
 800267c:	4610      	mov	r0, r2
 800267e:	f000 f8ea 	bl	8002856 <TIM_ITRx_SetConfig>
        break;
 8002682:	e002      	b.n	800268a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002684:	bf00      	nop
 8002686:	e000      	b.n	800268a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002688:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a25      	ldr	r2, [pc, #148]	; (8002794 <TIM_Base_SetConfig+0xa8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d007      	beq.n	8002714 <TIM_Base_SetConfig+0x28>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270a:	d003      	beq.n	8002714 <TIM_Base_SetConfig+0x28>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a22      	ldr	r2, [pc, #136]	; (8002798 <TIM_Base_SetConfig+0xac>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d108      	bne.n	8002726 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <TIM_Base_SetConfig+0xa8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d007      	beq.n	800273e <TIM_Base_SetConfig+0x52>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002734:	d003      	beq.n	800273e <TIM_Base_SetConfig+0x52>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a17      	ldr	r2, [pc, #92]	; (8002798 <TIM_Base_SetConfig+0xac>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d108      	bne.n	8002750 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a07      	ldr	r2, [pc, #28]	; (8002794 <TIM_Base_SetConfig+0xa8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d103      	bne.n	8002784 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	615a      	str	r2, [r3, #20]
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	40012c00 	.word	0x40012c00
 8002798:	40000400 	.word	0x40000400

0800279c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f023 0201 	bic.w	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f023 030a 	bic.w	r3, r3, #10
 80027d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	621a      	str	r2, [r3, #32]
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f023 0210 	bic.w	r2, r3, #16
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002822:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	031b      	lsls	r3, r3, #12
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002834:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	621a      	str	r2, [r3, #32]
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002856:	b480      	push	{r7}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	f043 0307 	orr.w	r3, r3, #7
 8002878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	609a      	str	r2, [r3, #8]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800288a:	b480      	push	{r7}
 800288c:	b087      	sub	sp, #28
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	021a      	lsls	r2, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	609a      	str	r2, [r3, #8]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028dc:	2302      	movs	r3, #2
 80028de:	e041      	b.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a14      	ldr	r2, [pc, #80]	; (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d009      	beq.n	8002938 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292c:	d004      	beq.n	8002938 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d10c      	bne.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800293e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	4313      	orrs	r3, r2
 8002948:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40000400 	.word	0x40000400

08002978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <__libc_init_array>:
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	2600      	movs	r6, #0
 80029a0:	4d0c      	ldr	r5, [pc, #48]	; (80029d4 <__libc_init_array+0x38>)
 80029a2:	4c0d      	ldr	r4, [pc, #52]	; (80029d8 <__libc_init_array+0x3c>)
 80029a4:	1b64      	subs	r4, r4, r5
 80029a6:	10a4      	asrs	r4, r4, #2
 80029a8:	42a6      	cmp	r6, r4
 80029aa:	d109      	bne.n	80029c0 <__libc_init_array+0x24>
 80029ac:	f000 f822 	bl	80029f4 <_init>
 80029b0:	2600      	movs	r6, #0
 80029b2:	4d0a      	ldr	r5, [pc, #40]	; (80029dc <__libc_init_array+0x40>)
 80029b4:	4c0a      	ldr	r4, [pc, #40]	; (80029e0 <__libc_init_array+0x44>)
 80029b6:	1b64      	subs	r4, r4, r5
 80029b8:	10a4      	asrs	r4, r4, #2
 80029ba:	42a6      	cmp	r6, r4
 80029bc:	d105      	bne.n	80029ca <__libc_init_array+0x2e>
 80029be:	bd70      	pop	{r4, r5, r6, pc}
 80029c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c4:	4798      	blx	r3
 80029c6:	3601      	adds	r6, #1
 80029c8:	e7ee      	b.n	80029a8 <__libc_init_array+0xc>
 80029ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ce:	4798      	blx	r3
 80029d0:	3601      	adds	r6, #1
 80029d2:	e7f2      	b.n	80029ba <__libc_init_array+0x1e>
 80029d4:	08002a54 	.word	0x08002a54
 80029d8:	08002a54 	.word	0x08002a54
 80029dc:	08002a54 	.word	0x08002a54
 80029e0:	08002a58 	.word	0x08002a58

080029e4 <memset>:
 80029e4:	4603      	mov	r3, r0
 80029e6:	4402      	add	r2, r0
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d100      	bne.n	80029ee <memset+0xa>
 80029ec:	4770      	bx	lr
 80029ee:	f803 1b01 	strb.w	r1, [r3], #1
 80029f2:	e7f9      	b.n	80029e8 <memset+0x4>

080029f4 <_init>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	bf00      	nop
 80029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fa:	bc08      	pop	{r3}
 80029fc:	469e      	mov	lr, r3
 80029fe:	4770      	bx	lr

08002a00 <_fini>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	bf00      	nop
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr
